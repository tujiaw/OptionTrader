package SM;

// 1. 客户端必须首先调用SMReqLogin登录
// 2. 客户端在准备好接收聊天消息时要调用SMReqSession（OpenSession）
// 3. 客户端在上一步执行完后，需要持续发心跳SMReqHeartbeat
// 4. 客户端改变自己的在线状态

// group和roster只有总版本号
// group的版本号和分组的成员及名称顺序有关
// roster的版本号与成员变动、成员信息变动以及成员在当前列表中信息（是否好友、是否block、昵称等）有关
// Room单独的版本号根据描述、成员角色权限及成员列表的改变而改变
// SendGroup只有总版本号，与群发组的数量，成员，组名称有关

message SMPubNotify{
    enum TYPE {
        TYPE_RELOGIN   = 1; // 客户端接收此消息后应该重新登录
    }
	required TYPE type = 1;
}


// 所有结构的共同数据部分
message SMHeader{ 
    required uint64  from      = 1; // 发起方的user id，服务端要校验
    optional uint64  sourceNo  = 2; // 发起方填入的序列号
    optional uint64  serialNo  = 3; // 服务器填入的序列号
    optional uint32  errorCode = 4; // 错误码
}

// 客户端类型
enum SMRes {
    RES_PC       = 0;
    RES_ANDROID  = 1;
    RES_IOS      = 2;
    RES_WEB      = 3;
    RES_SERVER  = 4;
}

// 客户端登录
message SMReqLogin{
    required SMHeader header   = 1;
	optional SMRes    res      = 2;
}
message SMResLogin{
    required SMHeader header   = 1;
}
// 同一用户不同地方登录后发送此通知
message SMPubLogin{
    required uint64 user  = 1;
    optional SMRes  res   = 2;
    optional string token = 3;
}

// 客户端开启session
message SMReqSession{
    enum SESSION_ACTION {
        ACTION_OPEN   = 1; // 客户端已经准备好接收聊天信息或其他用户的在线信息
        ACTION_CLOSE  = 2; // 客户端要求停止接收聊天信息或其他用户的在线信息
    }
    required SMHeader       header   = 1;
    required SESSION_ACTION action   = 2; // 如上所述
	optional SMRes          res      = 3;
}
message SMResSession{
    required SMHeader       header   = 1;
}

// 在线状态, 要显示在接收者客户端
enum PRESENCE_SHOW {    
    SHOW_OFFLINE   = 1; // 离线 
    SHOW_ONLINE    = 2; // 在线
    SHOW_AWAY      = 3; // 离开
    SHOW_BUSY      = 4; // 忙碌
    SHOW_INVISIBLE = 5; // 隐身
}

// 客户端心跳(Open session以后才可以发心跳)
message SMReqHeartbeat{
    required SMHeader header    = 1;
	optional SMRes    res       = 2;
    optional PRESENCE_SHOW show = 3;
}
message SMResHeartbeat{
    required SMHeader header   = 1;
}


// 在线状态,同一好友的在线状态和其在某个群中的在线状态是一致的
message SMPresence{
    required uint64         id       = 1; // 用户id
    required uint64         serialNo = 2; // 状态改变的序列号
    optional PRESENCE_SHOW  show     = 3; // 如上所述 
	optional SMRes          res      = 4;
}

// 用户资料
message SMUserInfo{
    required uint64 userID            = 1;  // 用户id
    optional uint64 version           = 2;  // 此用户资料的版本号
    optional string name              = 3;  // 注册名
    optional string displayName       = 4;  // 废弃
    optional bool showDisplayName     = 5;  // 是否显示英文名
    optional string companyId         = 6;  // 公司id
    optional string mobile            = 7;  // 移动电话
    optional string privacy           = 8;  // 隐私策略 
    optional string right             = 9;  // 用户权限
    optional int32  avatarId          = 10;	// 大于ID_AVATAR为自定义头像
    optional bytes  avatar            = 11; // 自定义头像数据
    optional string loginName		      = 12;	// 登录名
    optional string englishNameFirst  = 13; // 英文名
    optional string englishNameLast   = 14; // 英文姓
    optional string address           = 15; // 地址
}

message SMUserDetailInfo{
    required SMUserInfo userInfo      = 1;  // 用户基本资料
    optional string englishNameFirst  = 2;  // 英文名【废弃字段】
    optional string englishNameLast   = 3;  // 英文姓【废弃字段】
    optional string status            = 4;  // 个性签名
    optional string department        = 5;  // 部门
    optional string province          = 6;  // 省份【废弃字段】
    optional string city              = 7;  // 所在城市【废弃字段】
    optional string phone             = 8;  // 固定电话
    optional string pinyin            = 9;  // 拼音
    optional string pinyinShort       = 10; // 简拼
    optional string email             = 11; 
    optional string qq                = 12; 
    optional string rm                = 13; 
    repeated uint64 contacts          = 14; // 公众号联系人
    optional uint64 roomId            = 15; // 绑定的群
}

message SMRosterItemInfo{
    required uint64 userID            = 1; // 用户id
    optional string nickName          = 2; // 昵称（备注名）
    optional bool   isFriend          = 3; // 是否好友（仅用于联系人）
    optional bool   block             = 4; // 是否阻止（仅用于联系人）
	optional SMUserDetailInfo userDetailInfo = 5;
}

// 客户端向服务器请求某些指定用户的资料
// userId指定请求查询的用户id,如果id==0,表示请求所有好友资料
// currentVersion和userId一一对应,如果用户资料的版本号和currentVersion指定的版本号相同,服务器就不返回userInfo
// 如果没有设置currentVersion或者相应数值等于0,表示要求服务器不判断版本,直接提供此人的资料
message SMReqUserInfo{
    required SMHeader header       = 1;
    repeated uint64 userId         = 2;
    repeated uint64 currentVersion = 3;
	optional bool reqDetail        = 4;
}

// 服务器返回的用户资料
message SMResUserInfo{
    required SMHeader header                 = 1;
    repeated SMUserDetailInfo userDetailInfo = 2;
}

// 客户端修改本人的用户资料(只能修改显示名、头像、隐私、签名)。
// userDetailInfo中只包含要修改的项目,服务端要检查是否可以修改相应内容
message SMReqUserInfoSet{
    required SMHeader header                 = 1;
    required SMUserDetailInfo userDetailInfo = 2;
}
// 服务器对修改用户资料请求的响应
// 如果修改正确，返回修改后的版本号，如果修改了头像，就会返回对应的id
message SMResUserInfoSet{
    required SMHeader header  = 1;
    optional uint64 version   = 2;
    optional int32 avatarId   = 3;
}
message SMPubUserInfoChanged{
    required uint64 user    = 1;
}

// 客户端向服务器请求好友列表（包括好友和陌生人）
// 如果currentVersion和服务器版本相同,返回的QMIQResRoster只填入version
message SMReqRoster{
    required SMHeader header       = 1;
    optional uint64 currentVersion = 2; // 本地roster的版本号,可以不填,表示要求服务器不比较版本号
}

// 服务器对好友列表请求的回应
message SMResRoster{
    required SMHeader header       = 1;
    optional uint64 versionRoster  = 2; // 当前Roster的版本号
    repeated SMRosterItemInfo userUpdate = 3;// 是指定版本和最新版本之间改变的成员;
    repeated uint64 userRemoved    = 4; // 请求中指定版本号时,是指定版本和最新版本之间删除的成员,只填id;
	optional bool isComplete                = 5;  // 是否为全量
}

// 联系人信息,用于展现Group的信息和成员列表
message SMGroup{
    required uint32 ID            = 1; // 当前Groupid
    required uint32 order         = 2; // 序号
    optional string name          = 3; // 当前Group名称
	optional bool isDel           = 4;
    repeated uint64 users         = 5; // 请求中没有指定版本号时,是当前group的所有成员;请求中指定版本号时,是指定版本和最新版本之间增加的成员;
    repeated uint64 userRemoved   = 6; // 请求中指定版本号时,是指定版本和最新版本之间删除的成员,只填id;
}

// 客户端向服务器请求分组
message SMReqGroup{
    required SMHeader header       = 1;
    required uint64 currentVersion = 2; // 本地group的总版本号
}

// 服务器对分组请求的回应
message SMResGroup{
    required SMHeader header     = 1;
    optional uint64 version      = 2; // 当前Group的总版本号，根据group的SMGroup内容而改变，不包括成员自身信息的变动
	repeated SMGroup  groupInfo  = 3;
	optional bool isComplete      = 4;  // 是否为全量
}
message SMRoomMember{
	enum ROLE{
		 ROLE_OWNER  = 1;
		 ROLE_ADMIN  = 2;
		 ROLE_MEMBER = 3;
	}
	required uint64 id = 1;
	required ROLE role = 2;
	required string right = 3; // 字符串用分号分隔权限(具体定义见iddef.h中ROOM_RIGHT_XXX)：speak:可以发言;	
	optional uint64 joinTime = 4;
}

enum RoomType{
	 ROOM_TYPE_NORMAL   = 1;
	 ROOM_TYPE_BROADCAST = 2;//此项作为群发组移出 
	 ROOM_TYPE_SPEAKER   = 3;
	 ROOM_TYPE_CUSTOMERSERVICE = 4;
};

// 联系人信息,用于展现Room的信息和成员列表
message SMRoom{
    required uint64 ID           = 1; // 当前Room的id
	optional uint64 version      = 2; // 当前Room的版本号，根据成员加入退出、描述信息、成员权限、是否block而改变
    optional string name         = 3; // 当前Room的名称
    optional string alias        = 4; // 当前Room的别名（群号）
    optional string description  = 5; // 当前Room的描述
    optional string notice       = 6; // 当前Room的描述
    optional bool block          = 7; // 是否阻止当前room
    optional uint32 total        = 8; // 当前Room的成员总数
    repeated uint64 memberRemove = 9; // 请求中指定版本号时,是指定版本和最新版本之间删除的成员,只填id;
    repeated SMRoomMember memberInfo = 10; // 请求中没有指定版本号时,是当前room的所有成员;请求中指定版本号时,是指定版本和最新版本之间增加的成员，不包括成员自身信息的变动;
    optional RoomType type         = 11; // 当前Room的种类
    optional bool openInSearch     = 12; // 当前Room是否可以搜索
}

// 客户端向服务器请求群
// 当不指定roomID时,返回所有群信息(全量room信息，是否包括成员取决于reqMember）
// 当指定roomID时,返回指定群信息
// reqMember==true时,返回的roomInfo中memberInfo会填入所有资料
// reqMember==false时,返回的roomInfo中不填memberInfo
message SMReqRoom{
    required SMHeader header           = 1;
    repeated uint64 roomID             = 2;
    repeated uint64 currentVersion     = 3; // 本地room的版本号(当不指定roomID时是总版本号)
    optional bool reqMember            = 4; // 是否请求群的成员
}
// 服务器对群请求的回应
message SMResRoom{
    required SMHeader header   = 1;
    repeated SMRoom roomInfo   = 2;
	repeated bool isComplete    = 3; // 是否为全量
}

// 客户端向服务器请求群列表
message SMReqRoomList{
    required SMHeader header = 1;
    required uint64 version  = 2;//room list版本号,第一次填0
}

// 服务器对群请求的回应
message SMResRoomList{
    required SMHeader header    = 1;
    optional uint64 version     = 2;//room list版本号
    repeated uint64 room        = 3;
    repeated uint64 roomVersion = 4;
    repeated uint64 removed     = 5;
	optional bool isComplete     = 6; // 是否为全量
}

// 客户端向服务器订阅或取消订阅群成员在线状态
// 必须指定roomID,订阅或取消订阅指定群成员在线状态
message SMReqRoomMemberPresence{
    required SMHeader header  = 1;
    repeated uint64 roomID    = 2;
    required bool subscribe   = 3; // 订阅或取消订阅
    optional bool sum         = 4; // 是否汇总在线数
}

message SMRoomMemberPresence{
    required uint64 roomID       = 1;
    optional uint32 total        = 2; // 当前Room的成员总数
    optional uint32 online       = 3; // 当前Room的在线成员数
	repeated SMPresence presence = 4; // 如果订阅有效才赋值
}

// 服务器对群成员在线状态订阅的回应
message SMResRoomMemberPresence{
    required SMHeader header                   = 1;
	repeated SMRoomMemberPresence roomPresence = 2;
}

// 加好友,服务器用SMPubSysMsgChanged通知被加好友
// userId : 对方;    groupId : 发出方分组;（陌生人组要固定） description : 验证信息
message SMReqFriendAdd{
	required SMHeader header    = 1;
	required uint64 userId      = 2; // 用户ID
	required uint32 groupId     = 3; // 用户组ID
	optional string nickName    = 4; // 昵称
	optional string description = 5; // 请求描述
	optional bool bServer       = 6; // 是否为服务端后台调用
}
message SMResFriendAdd{
	required SMHeader header      = 1;
	optional uint64 groupVersion  = 2;
	optional uint64 rosterVersion = 3;
	optional uint64 dealMessageId = 4;		// 对方加自己为好友的系统消息ID
}

// 批量加好友,服务器用SMPubSysMsgChanged通知被加好友
// userId : 对方;    groupId : 发出方分组;（陌生人组要固定） description : 验证信息
message SMReqFriendAddBatch{
    required SMHeader header    = 1;
    repeated uint64 userId      = 2;
	required uint32 groupId     = 3;
	optional string description = 4;
}
message SMResFriendAddBatch{
    required SMHeader header      = 1;
	optional uint64 groupVersion  = 2;
	optional uint64 rosterVersion = 3;
	repeated uint64 dealMessageId = 4;		// 对方加自己为好友的系统消息ID
}

// 好友变更请求
message SMReqRosterUpdateNotify
{
	required uint64 userId        = 1; // 用户ID
	required uint32 groupId       = 2; // 用户组ID
	repeated uint64 friendIds     = 3; // 添加的好友列表
	repeated uint64 addMsgIds     = 4; // 好友请求消息ID【0代表没有系统消息】
	repeated uint64 dealMsgIds    = 5; // 对方加自己的系统消息【0代表没有系统消息】
	required uint64 groupVersion  = 6; // 用户组版本
	required uint64 rosterVersion = 7; // 名册版本
	repeated uint64 userRemove    = 8; // 删除用户列表
}
message SMResRosterUpdateNotify
{
}


// 好友添加通知
message SMPubFriendAdd
{
	repeated uint64 userId        = 1; // 用户ID列表
	optional uint32 groupId       = 2; // 用户组ID
	optional uint64 groupVersion  = 3; // 用户组版本
	optional uint64 rosterVersion = 4; // 名册版本
	repeated uint64 userRemove    = 5; // 删除用户列表
}

// 添加陌生人
message SMReqStrangerAdd{
    required SMHeader header   = 1;
	required uint64 strangerId = 2;
}
message SMResStrangerAdd{
    required SMHeader header      = 1;
	optional uint32 Group         = 2;
	optional uint64 versionRoster = 3;
	optional uint64 versionGroup  = 4;
}
message SMPubStrangerAdd{
    required uint64 user    = 1;
	optional uint32 Group         = 2;
	optional uint64 versionRoster = 3;
	optional uint64 versionGroup  = 4;
}

// 删好友
// userId : 对方;     groupId : 发出方分组;（陌生人组要固定）
message SMReqFriendRemove{
	required SMHeader header = 1;
	required uint64 userId   = 2;
	required uint32 groupId  = 3;
	optional bool bServer    = 4; // 是否为服务端后台调用
}
message SMResFriendRemove{
	required SMHeader header      = 1;
	optional uint64 groupVersion  = 2;
	optional uint64 rosterVersion = 3;
}

// 接受加好友请求
// groupId : 发出方分组;（陌生人组要固定）
message SMReqFriendAccept{
    required SMHeader header  = 1;
	repeated uint64 messageId = 2;
	required uint32 groupId   = 3;
}
message SMResFriendAccept{
    required SMHeader header      = 1;
	optional uint64 groupVersion  = 2;
	optional uint64 rosterVersion = 3;
}

// 忽略加好友请求
message SMReqFriendIgnore{
    required SMHeader header  = 1;
	repeated uint64 messageId = 2;
}
message SMResFriendIgnore{
    required SMHeader header   = 1;
}

// 阻止或取消阻止某些用户或群
message SMReqBlock{
    required SMHeader header = 1;
    required uint64 Id       = 2;
	required bool isBlock    = 3;
}
message SMResBlock{
    required SMHeader header      = 1;
	optional uint64 Version       = 2;
}

// 修改他人备注
message SMReqChangeNick{
    required SMHeader header = 1;
    required uint64 userId   = 2;
	required string nickName = 3;
}
message SMResChangeNick{
    required SMHeader header      = 1;
	optional uint64 rosterVersion = 2;
}

// 创建分组
// groupName : 分组名称
message SMReqGroupCreate{
    required SMHeader header  = 1;
	required string groupName = 2; 
}
message SMResGroupCreate{
    required SMHeader header     = 1;
	optional uint32 groupId      = 2;
	optional uint32 groupOrder   = 3;
	optional uint64 groupVersion = 4;
}

// 删除分组
message SMReqGroupRemove{
    required SMHeader header   = 1;
    required uint32 groupId    = 2;
}
message SMResGroupRemove{
    required SMHeader header     = 1;
	optional uint64 groupVersion = 2;
}

// 修改组名称
message SMReqGroupName{
    required SMHeader header  = 1;
    required uint32 groupId   = 2;
	optional string groupName = 3;
}
message SMResGroupName{
    required SMHeader header     = 1;
	optional uint64 groupVersion = 2;
}

// 修改组序号
message SMReqGroupOrder{
    required SMHeader header = 1;
    required uint32 groupId  = 2;
	required uint32 order    = 3;
}
message SMResGroupOrder{
    required SMHeader header     = 1;
	optional uint64 groupVersion = 2;
}

// 移动到某组
message SMReqGroupMemberMove{
    required SMHeader header  = 1;
    required uint64 userId    = 2;
	optional uint32 groupFrom = 3;
	optional uint32 groupTo   = 4;
}
message SMResGroupMemberMove{
    required SMHeader header     = 1;
	optional uint64 groupVersion = 2;
}

// 创建群
message SMReqRoomCreate{
    required SMHeader header    = 1;
	required string name        = 2;
    required RoomType type      = 3;
	optional string description = 4;	
}
message SMResRoomCreate{
    required SMHeader header   = 1;
    required uint64 room       = 2; // 当前Room的id
	required uint64 version    = 3; // 当前Room的版本号，根据成员列表的改变而改变
	optional string alias      = 4;
}

// 创建群2,服务器用SMPubSysMsgChanged通知被邀请人
message SMReqRoomCreate2{
    required SMHeader header    = 1;
	required string name        = 2;
    required RoomType type      = 3;
	optional string description = 4;	
	repeated uint64 inviteFriend= 5;
}
message SMResRoomCreate2{
    required SMHeader header   = 1;
    required uint64 room       = 2; // 当前Room的id
	required uint64 version    = 3; // 当前Room的版本号，根据成员列表的改变而改变
	optional string alias      = 4;
}

// 删除群,服务器用SMPubRoomInfoUpdate通知所有群成员
message SMReqRoomRemove{
    required SMHeader header   = 1;
    required uint64 room       = 2; // 当前Room的id
}
message SMResRoomRemove{
    required SMHeader header   = 1;
}

// 修改群名、群描述、群公告,服务器用SMPubRoomInfoUpdate通知所有群成员
message SMReqRoomInfoUpdate{
    required SMHeader header    = 1;
    required uint64 room        = 2; // 当前Room的id
	optional string name        = 3;
	optional string description = 4;
	optional string notice      = 5;
    optional bool openInSearch  = 6; // 当前Room是否可以搜索
}
message SMResRoomInfoUpdate{
    required SMHeader header  = 1;
	optional uint64 version   = 2;
}

// 修改群角色、权限、群成员删除,服务器用SMPubRoomInfoUpdate通知所有群成员
message SMReqRoomManage{
    required SMHeader header         = 1;
    required uint64 room             = 2; // 当前Room的id
    repeated SMRoomMember memberInfo = 3;
	repeated uint64 memberRemove     = 4;
}
message SMResRoomManage{
    required SMHeader header = 1;
	optional uint64 version  = 2;
}

// 请求加入群,服务器用SMPubRoomInfoUpdate通知所有群成员（此用户已经被邀请后，做此操作，直接有效，所以用此通知），用SMPubSysMsgChanged通知所有群管理员系统消息相应改变
message SMReqRoomJoin{
    required SMHeader header    = 1;
	required uint64 room        = 2;
	optional string description = 3;
}
message SMResRoomJoin{
    required SMHeader header   = 1;
	optional bool isReReq           = 2; // 是否为重复请求
}

// 请求退出群，服务器用SMPubRoomInfoUpdate通知所有群成员
message SMReqRoomQuit{
    required SMHeader header  = 1;
	required uint64 room      = 2;
}
message SMResRoomQuit{
    required SMHeader header  = 1;
	optional uint64 version   = 2;
}

// 接受加入群请求,服务器用SMPubRoomInfoUpdate通知所有群成员，用SMPubSysMsgChanged通知所有群管理员系统消息相应改变
message SMReqRoomAccept{
    required SMHeader header  = 1;
	required uint64 messageId = 2;
}
message SMResRoomAccept{
    required SMHeader header = 1;
	optional uint64 room     = 2;
	optional uint64 user     = 3;
	optional uint64 version  = 4;
}

// 拒绝加入群请求,服务器用SMPubSysMsgChanged通知所有群管理员系统消息相应改变
message SMReqRoomIgnore{
    required SMHeader header  = 1;
	required uint64 messageId = 2;
}
message SMResRoomIgnore{
    required SMHeader header   = 1;
}

// 邀请加入群,服务器用SMPubRoomInfoUpdate通知所有群成员（此用户已经请求加入过，做此操作，直接有效，所以用此通知），用SMPubSysMsgChanged通知被邀请人
message SMReqRoomInvite{
    required SMHeader header   = 1;
	required uint64 roomId     = 2;
	repeated uint64 friendId   = 3;
}
message SMResRoomInvite{
    required SMHeader header  = 1;
    repeated uint64 autoAddId = 2; // 自动添加的成员
}

// 忽略邀请加入群
message SMReqRoomInviteIgnore{
    required SMHeader header   = 1;
	required uint64 messageId = 2;
}
message SMResRoomInviteIgnore{
    required SMHeader header   = 1;
}

// 接受入群邀请,服务器用SMPubRoomInfoUpdate通知所有群成员
message SMReqRoomInviteAccept{
    required SMHeader header  = 1;
	required uint64 messageId = 2;
}
message SMResRoomInviteAccept{
    required SMHeader header      = 1;
	optional uint64 roomId        = 2;
	optional uint64 roomVersion   = 3;
	optional uint64 joinMessageId = 4;
}

//通知客户端群信息变更，需要重新查询
message SMPubRoomInfoUpdate{
    required uint64 room        = 1;
	optional uint64 version     = 2;
	optional bool deleted       = 3;
}

// 群成员变化类型，用于SMRoomUpdateInfo
enum SMUpdateType {
    UpdateTypeNoChanged = 0;  // 该成员无变化
    UpdateTypeNoAdded = 1; // 该成员新增加
    UpdateTypeNoDeleted = 2; // 该成员被删除
}

// 群变化消息
message SMRoomUpdateInfo {
    required uint64 member = 1;            // 群成员ID
    required SMUpdateType updateType = 2;  // 变化类型
    optional uint64 sysMsgId = 3;          // 新增/变化的系统消息ID
}

// 请求SM通知群发生变化
message SMReqRoomUpdateNotify{
	required SMHeader header         = 1; // 消息头
	required uint64 roomid           = 2; // 群ID
	optional uint64 version          = 3; // 群版本
	repeated SMRoomUpdateInfo update = 4; // 变更成员
	repeated uint64 admins           = 5; // 管理员列表【包括群主】
}
message SMResRoomUpdateNotify{
    required SMHeader header       = 1; 
}

// 客户端通知服务器改变自己在线状态
message SMReqPresence{
    required SMHeader   header   = 1; 
    required SMPresence presence = 2; // 如上所述
}

message SMResPresence{
    required SMHeader header  = 1; 
}

// 客户端批量请求其他用户在线状态
//    如果指定to，服务器返回指定用户在线状态
//    如果不指定to，服务器返回所有好友在线状态
message SMReqPresenceBatch{
    required SMHeader header = 1; 
    repeated uint64 to       = 2;
}

message SMResPresenceBatch{
    required SMHeader   header    = 1; 
    repeated SMPresence presence  = 2; // 如上所述
}

// 请求新会话
message SMReqConversationNew{
    required SMHeader header = 1;
    required uint64 toId     = 2;
}
message SMResConversationNew{
    required SMHeader header = 1;
    required uint64 toId     = 2;
	optional uint64 key      = 3;
}

// 客户端键盘输入事件，同时用于通知其他客户
message SMReqChatTyping{
    required SMHeader header = 1;
    required uint64 toId     = 2;
}
message SMResChatTyping{
    required SMHeader header = 1;
}

enum MSG_TYPE {                  // 消息类型
    MSG_TYPE_CHAT             = 1; // 普通单人聊天
    MSG_TYPE_GROUP_NORMAL     = 2; // 群聊
    MSG_TYPE_GROUP_BROADCAST  = 3; // 群发
    MSG_TYPE_GROUP_SPEAKER    = 4; // Speaker群发
    MSG_TYPE_GROUP_CUSTOMERSERVICE = 5; // 客服群
    MSG_TYPE_BROADCAST      = 6; // 广播
    MSG_TYPE_SHAKE          = 7; // 抖动
}

// 客户端发送出去聊天消息  
message SMReqMessageSend{
    required SMHeader header    = 1;
    repeated uint64 to          = 2;// to是要发送给对方的id,可以是user id,也可以是room id,当群聊指定room id后，又指定user id，表示只发送给群中指定成员
    required MSG_TYPE type      = 3; // 上述消息类型
    required bytes body         = 4; // 消息内容,客户端自定义内容
    optional uint32 keyServer   = 5; // 不赋值或者等于0就表示不加密
    optional uint64 keyId       = 6; // 不赋值或者等于0就表示不加密
    optional SMRes res          = 7; // 发出消息的客户端
	optional bool ServerSent    = 8;// 服务器代发
}

message UserMsgInfo{
      optional uint64 user = 1; // userid,可以是群发组id
	  required uint64 msgid = 2; //消息id
	  required uint64 time = 3; // 消息写入数据库时间
      optional uint32 errCode = 4; // 错误码
}

// 服务器回复客户端聊天消息  
message SMResMessageSend{
    required SMHeader header    = 1;
	repeated UserMsgInfo toUserMsgInfo = 2;	  
}


// 后台服务发送出去的聊天消息  
message SMReqServiceMessageSend{
    required SMHeader header    = 1;
    repeated uint64 to          = 2;// to是要发送给对方的id,可以是user id,也可以是room id,当群聊指定room id后，又指定user id，表示只发送给群中指定成员
    required MSG_TYPE type      = 3; // 上述消息类型
    required bytes body         = 4; // 消息内容,客户端自定义内容
    optional uint32 keyServer   = 5; // 不赋值或者等于0就表示不加密
    optional uint64 keyId       = 6; // 不赋值或者等于0就表示不加密
    optional SMRes res          = 7; // 发出消息的客户端
	optional bool ServerSent    = 8;// 服务器代发
}

// 服务器回复服务的聊天消息  
message SMResServiceMessageSend{
    required SMHeader header    = 1;
	repeated UserMsgInfo toUserMsgInfo = 2;	  
}

// 设置已读消息,userTo和messageId一一对应
message SMReqMessageRead{
    required SMHeader header  = 1;
	repeated uint64 userTo    = 2;
	repeated uint64 messageId = 3;
}
message SMResMessageRead{
    required SMHeader header  = 1;
}

// // 设置删除消息
// message SMReqMessageDel{                    
//     required SMHeader header      = 1;
// 	required uint64 userTo        = 2;
// 	required uint64 begTime       = 3;
// 	required uint64 endTime       = 4;
// }
// message SMResMessageDel{
//     required SMHeader header  = 1;
// }

// 客户端接收到的聊天消息
message SMMessage{
    required SMHeader header    = 1;
    repeated uint64 to          = 2; // to是要发送给对方的id,可以是user id,也可以是room id,当群聊指定room id后，又指定user id，表示只发送给群中指定成员
    required MSG_TYPE type      = 3; // 上述消息类型
    required uint64 id          = 4; // 由服务器生成的当前对话中的唯一序列号
    optional bytes body         = 5; // 消息内容,是repeated SMsgItem的序列化内容
    optional uint32 keyServer   = 6; // 不赋值或者等于0就表示不加密
    optional uint64 keyId       = 7; // 不赋值或者等于0就表示不加密
    required uint64 time        = 8; // 发出的时间,由服务器生成
    optional SMRes res          = 9; // 发出消息的客户端
	optional bool deleted       = 10;// 已经删除
}

// 会话信息
message SMConversation{
    required uint64 toID       = 1;  // 会话对方id,可以是一个人的user id,也可以是一个群的room id
    required uint32 count      = 2; //未读消息数量
    repeated SMMessage msg     = 3; //未读消息列表;
}

// 客户端向服务器请求会话列表
// 如果没有对to赋值，服务器返回所有会话列表
// 如果有对to赋值，服务器返回指定的会话列表
message SMReqConversation{
    required SMHeader header   = 1;
    repeated uint64 to         = 2;
    required uint64 timeStamp  = 3;  // 请求此时间戳以后有未读消息的会话
    required uint32 lastCount  = 4;  // 请求返回最新消息的数量，0：代表不返回消息内容
}

// 服务器对会话列表请求的回应
message SMResConversation{
    required SMHeader header                 = 1;
    repeated SMConversation conversationInfo = 2;
}

// 客户端向服务器请求历史消息
// 必须对to赋值，表明要求服务器返回指定的会话中的消息
message SMReqMessage{
    required SMHeader header    = 1;
    required uint64 to          = 2;
    optional uint64 timeStamp   = 3;  // 请求此时间戳以后的消息
    required uint64 messageID   = 4;  // 作为基准的消息id
    optional int32 messageCount = 5;  // 请求基准的消息前后(或上述时间戳前后)几条
}

// 服务器对历史消息请求的回应
message SMResMessage{
    required SMHeader header       = 1;
    repeated SMMessage messageInfo = 2;
}

// 客户端保存数据到服务器
message SMReqConfigSave{
    required SMHeader header    = 1;
    repeated string key         = 2;
    repeated bytes value        = 3;
}
// 服务器响应客户端保存数据的请求
message SMResConfigSave{
    required SMHeader header    = 1;
    repeated string key         = 2;
    repeated uint64 version     = 3;
}

// 客户端查询保存数据
// 如果指定version和服务器中version相同，服务器返回SMResConfig中只包含key,version
// 如果没有指定version，或version小于服务器中version，服务器返回SMResConfig包含所有数据
message SMReqConfigGet{
    required SMHeader header    = 1;
    repeated string key         = 2;
    repeated uint64 version     = 3;
}

// 服务器响应客户端保存数据的请求
message SMResConfigGet{
    required SMHeader header    = 1;
    repeated string key         = 2;
    repeated bytes value        = 3;
    repeated uint64 version     = 4;
}

// 文件传输状态
enum STATUS_FILE_SEND{
	FILE_SEND_UNTREATED = 1;          // 未处理
	FILE_SEND_UPLOADING = 2;          // 上传中
	FILE_SEND_UPLOADED  = 3;          // 已上传
	FILE_SEND_REJECT    = 10;         // 已拒绝
	FILE_SEND_CANCEL    = 11;         // 已取消
	FILE_SEND_FAILED    = 12;         // 已失败
	FILE_SEND_DONE      = 13;         // 已完成
}
enum STATUS_FILE_RCV{
	FILE_RCV_UNTREATED   = 1;          // 未处理
	FILE_RCV_DOWNLOADING = 2;          // 下载中
	FILE_RCV_REJECT      = 10;         // 已拒绝
	FILE_RCV_CANCEL      = 11;         // 已取消
	FILE_RCV_FAILED      = 12;         // 已失败
	FILE_RCV_DONE        = 13;         // 已完成
}

// 获取文件消息ID
message SMReqGetFileSendMsgId{
    required SMHeader header  = 1;
	required uint64 to        = 2;
}
message SMResGetFileSendMsgId{
    required SMHeader header  = 1;
	optional uint64 fileMsgId = 2;   // 文件消息ID
}

// 查询文件消息状态
message SMReqQueryFileSendMsg{
    required SMHeader header  = 1;
	required uint64 fileMsgId = 2;  // 文件消息ID
}
message SMResQueryFileSendMsg{
    required SMHeader header             = 1;
	optional STATUS_FILE_SEND statusSend = 2;   // 文件传输状态
	optional STATUS_FILE_RCV statusRcv   = 3;   // 文件传输状态
}

// 修改文件消息状态
message SMReqModFileSendMsg{
    required SMHeader header          = 1;
	required uint64 from              = 2;
	required uint64 to                = 3;
	required uint64 msgId             = 4;     // 聊天消息ID
	required uint64 fileMsgId         = 5;     // 文件消息ID
	optional STATUS_FILE_SEND statusSend = 6;  // 文件传输状态
	optional STATUS_FILE_RCV statusRcv = 7;    // 文件传输状态
}
message SMResModFileSendMsg{
    required SMHeader header    = 1;
}

// 变更通知
message  SMPubFileSendChange{
    required uint64 from  = 1;                          
    required uint64 to    = 2;
    required uint64 msgId = 3;  // 聊天消息ID
}


// 公司信息
message SMCompany{
    required string companyId         = 1; // 公司id
    optional string companyName       = 2; // 公司名称
    optional string companyShortName  = 3; // 公司简称
    optional string companyPinyin     = 4; // 公司拼音
    optional string companyShortPinyin= 5; // 公司简拼
    optional string orgType           = 6; // 机构类型
    optional string companyNameEn     = 7; // 公司英文名称
    optional string city              = 8; // 所在城市
    optional string province          = 9; // 省份
}

// 客户端请求公司信息
message SMReqCompany{
    required SMHeader header  = 1;
	repeated string companyId = 2; // 公司id
}

// 服务端对查询公司信息的回应
message SMResCompany{
    required SMHeader header   = 1;
	repeated SMCompany company = 2;
}

// 客户端请求时间
message SMReqTime{
    required SMHeader header  = 1;
}
// 服务端对查询时间的回应
message SMResTime{
    required SMHeader header = 1;
	optional uint64 time     = 2;
}

enum TYPE_SYSMSG{
	 TYPE_FRIEND = 1;
	 TYPE_ROOM   = 2;
	 TYPE_ALL    = 3;
};

enum STATUS_SYSMSG{
	 STATUS_UNREAD      = 1;
	 STATUS_READ_IGNORE = 2;
	 STATUS_READ_ACCEPT = 3;
	 STATUS_READ        = 4;
};

message SMSysMsgFriend{
    required  uint64 messageId     = 1;
	optional  uint64 fromId        = 2;
	optional  uint64 toId          = 3;
	optional  uint64 time          = 4;
	optional string description    = 5;
	optional  STATUS_SYSMSG status = 6;
}

message SMSysMsgRoom{
    enum TYPE_ACTION{
    	 TYPE_INVITE = 1;
    	 TYPE_APPLY  = 2;
    };
    required  uint64 messageId      = 1;
	optional  uint64 adminId        = 2;
	optional  uint64 userId         = 3;
	optional  uint64 roomId         = 4;
	optional TYPE_ACTION actionType = 5;
	optional  uint64 time           = 6;
	optional string description     = 7;
	optional  STATUS_SYSMSG status  = 8;
}

// 查询系统通知请求
message SMReqQuerySysMsg{
    required SMHeader header      = 1;
	required TYPE_SYSMSG type     = 2;
	optional uint64 lastMessageId = 3; // 未知时不赋值
	optional int32 lastCount      = 4; // 不赋值就表示不取具体内容
	optional bool all             = 5; // all为true时，read无效
	optional bool read            = 6;
	optional uint64 afterTime     = 7; // 此时间以后的消息
}
message SMResQuerySysMsg{
    required SMHeader header          = 1;
	optional uint32 countTotal        = 2;
	repeated SMSysMsgFriend msgFriend = 3;
	repeated SMSysMsgRoom msgRoom     = 4;
}

// 查询未读系统通知请求
message SMReqQuerySysMsgUnReadCount{
    required SMHeader header      = 1;
	required TYPE_SYSMSG type     = 2;
}
message SMResQuerySysMsgUnReadCount{
    required SMHeader header          = 1;
	optional uint32 countTotal        = 2;
}

// 查询系统通知请求
message SMReqQuerySysMsgOne{
    required SMHeader header  = 1;
	required uint64 messageId = 2;
}
message SMResQuerySysMsgOne{
    required SMHeader header          = 1;
	optional SMSysMsgFriend msgFriend = 2;
	optional SMSysMsgRoom msgRoom     = 3;
}

//---------for mobile
// 查询系统通知请求
message SMReqQuerySysMsgNoStatus{
    required SMHeader header      = 1;
	required TYPE_SYSMSG type     = 2;
	optional uint64 lastMessageId = 3; // 未知时不赋值
	optional int32 lastCount      = 4; // 不赋值就表示不取具体内容
	optional bool all             = 5; // all为true时，read无效
	optional bool read            = 6;
	optional uint64 afterTime     = 7; // 此时间以后的消息
}
message SMResQuerySysMsgNoStatus{
    required SMHeader header          = 1;
	optional uint32 countFriend       = 2;
	optional uint32 countRoom         = 3;
	repeated SMSysMsgFriend msgFriend = 4;
	repeated SMSysMsgRoom msgRoom     = 5;
}

// 查询未读系统通知请求
message SMReqQuerySysMsgUnReadCountNoStatus{
    required SMHeader header      = 1;
	required TYPE_SYSMSG type     = 2;
}
message SMResQuerySysMsgUnReadCountNoStatus{
    required SMHeader header          = 1;
	optional uint32 countFriend       = 2;
	optional uint32 countRoom         = 3;
}

// 查询系统通知请求
message SMReqQuerySysMsgOneNoStatus{
    required SMHeader header  = 1;
	required uint64 messageId = 2;
}
message SMResQuerySysMsgOneNoStatus{
    required SMHeader header          = 1;
	optional SMSysMsgFriend msgFriend = 2;
	optional SMSysMsgRoom msgRoom     = 3;
}

// 设置系统通知已读请求
message SMReqSysMsgStatusRead{
    required SMHeader header  = 1;
	repeated uint64 messageId = 2;
}
message SMResSysMsgStatusRead{
    required SMHeader header  = 1;
}
//////////////////////////////////////////////

// 所有系统消息改变后用此通知客户端
message SMPubSysMsgChanged{
    required uint64 MessageId = 1;
}

// 查询是否有过申请入群
message SMReqQueryApplyRoom{
    required SMHeader header  = 1;
	required uint64 room      = 2;
}
message SMResQueryApplyRoom{
    required SMHeader header = 1;
	optional bool applied    = 2;
}


// 客户端请求地点列表
message SMLocation{
	required string province = 1;  // 省份
    repeated string city     = 2;  // 所在城市
}
message SMReqQueryLocation{
    required SMHeader header  = 1;
}
message SMResQueryLocation{
    required SMHeader header     = 1;
    repeated SMLocation location = 2;
}

// 客户端请求机构类型
message SMReqQueryOrgType{
    required SMHeader header  = 1;
}
message SMResQueryOrgType{
    required SMHeader header  = 1;
    repeated string orgType   = 2; // 机构类型
}

message SMSearchUser{
 	required uint64 userId      = 1;
	required string Name        = 2;
 	required string companyId   = 3;
 	optional int32 avatarId     = 4;
 	optional bytes  avatar      = 5; // 自定义头像数据
    optional PRESENCE_SHOW show = 6;
	optional string displayName	= 7; // 昵称(需求变化，暂时未用，废弃)
	optional string companyName = 8; // 公司简称
}
message SMSearchRoom{
 	required uint64 roomId      = 1;
	required string roomName    = 2;
 	required string alias       = 3;
    required RoomType type      = 4;
 	required string ownerName   = 5;
	optional string companyName = 6; // 公司简称
 	optional uint32 memberNum   = 7;
}

// 客户端请求搜索(结果不包括自己的好友和群)
message SMReqSearch{
    required SMHeader header  = 1;
	required string key       = 2;
	optional string orgType   = 3;
	optional string province  = 4;
	optional string city      = 5;
	optional uint32 limitUser = 6; // 0: 表示不搜索用户
	optional uint32 limitRoom = 7; // 0: 表示不搜索群
}
message SMResSearch{
    required SMHeader header   = 1;
    repeated SMSearchUser user = 2;
    repeated SMSearchRoom room = 3;
}

// 群发组相关-------------------------
message SMSendGroup{
    required uint64 id           = 1; // 当前SendGroup的id
    optional uint64 user         = 2; // 当前SendGroup的拥有者
    optional string name         = 3; // 当前SendGroup的名称
    optional uint32 total        = 4; // 当前SendGroup的成员总数
    repeated uint64 member       = 5; // 请求中没有指定版本号时,是当前SendGroup的所有成员;请求中指定版本号时,是指定版本和最新版本之间增加的成员;
    repeated uint64 memberRemove = 6; // 请求中指定版本号时,是指定版本和最新版本之间删除的成员,只填id;
    optional bool removed        = 7;
}

// 客户端向服务器请求群发组
message SMReqSendGroup{
    required SMHeader header           = 1;
    optional uint64 currentVersion     = 2; // 本地sendGroup的总版本号
}
// 服务器对群发组请求的回应
message SMResSendGroup{
    required SMHeader header   = 1;
	optional uint64 version    = 2;
    repeated SMSendGroup info  = 3;
	optional bool isComplete          = 5; // 是否为全量
}

// 创建群发组
message SMReqSendGroupCreate{
    required SMHeader header    = 1;
	required string name        = 2;
	repeated uint64 member      = 3;
}
message SMResSendGroupCreate{
    required SMHeader header   = 1;
    optional uint64 sendGroup  = 2; // 当前SendGroup的id
	optional uint64 version    = 3; // 当前SendGroup的总版本号
}

// 删除群发组
message SMReqSendGroupRemove{
    required SMHeader header   = 1;
    required uint64 sendGroup  = 2; // 当前SendGroup的id
}
message SMResSendGroupRemove{
    required SMHeader header   = 1;
	optional uint64 version    = 2; // 当前SendGroup的总版本号
}

// 修改群发组名
message SMReqSendGroupInfoUpdate{
    required SMHeader header    = 1;
    required uint64 sendGroup   = 2; // 当前SendGroup的id
	required string name        = 3;
}
message SMResSendGroupInfoUpdate{
    required SMHeader header  = 1;
	optional uint64 version   = 2;
}

// 修改群发组成员
message SMReqSendGroupManage{
    required SMHeader header         = 1;
    required uint64 sendGroup        = 2; // 当前SendGroup的id
    repeated uint64 memberAdd        = 3;
	repeated uint64 memberRemove     = 4;
}
message SMResSendGroupManage{
    required SMHeader header = 1;
	optional uint64 version  = 2;
}

//////// 用户配置相关接口
message SMUserConfig
{
	optional bool bReceiveStrangerMsg   = 1;  // 是否接受陌生人消息
	optional bool bReceiveShake         = 2;  // 是否接收抖动
}

// 设置用户配置
message SMReqUserConfigSet
{
	required SMHeader header           = 1;
	required SMUserConfig userCfg      = 2;  // 用户配置
}
message SMResUserConfigSet
{
    required SMHeader header = 1;
}

// 获取用户配置
message SMReqUserConfigGet
{
	required SMHeader header           = 1;
}
message SMResUserConfigGet
{
    required SMHeader header = 1;
	optional SMUserConfig userCfg      = 2;  // 用户配置
}

message SMPubGoodsSubChanged{
    required uint64 orgId  = 1;                          
}

// 获取在线用户信息
message SMGetOnlineUserInfoReq
{
}
message SMGetOnlineUserInfoRsp
{
	repeated SMRes res  = 1; // 客户端类型
	repeated uint32 num = 2; // 在线用户数【与上述客户端类型一一对应】
}


/////////////////////////////////////////////
// SM内部用
// SM之间广播用户在某SM服务器上登录
// id是在本机上登录的用户id
message SMPubUserLogin{
    required SMHeader header  = 1;
    repeated uint64 Id        = 2;
}

message SMInnerReqCommon{
    required SMHeader header  = 1;
}

message SMInnerResCommon{
    required SMHeader header  = 1;
}

message SMInnerUpdateFriend{
    required SMHeader header  = 1;
}

message SMInnerUpdateRoom{
    required SMHeader header  = 1;
}

message SMInnerSubMsg{
    required SMHeader header  = 1;
}

message SMInnerSubPresence{
    required SMHeader header  = 1;
}

message SMInnerSubRoomMsg{
    required SMHeader header  = 1;
}

message SMInnerSubRoomPresence{
    required SMHeader header  = 1;
}

message SMInnerSubNotify{
    required SMHeader header  = 1;
}

message SMInnerSubSysNotify{
    required SMHeader header  = 1;
}

message SMInnerSubNotifyRoom{
    required SMHeader header  = 1;
}

//broadcast user presence to all contact and room.
message SMInnerPubPresence{
    required SMHeader header  = 1;
}

//broadcast all contact presence to user.
message SMInnerReqPresence{
    required SMHeader header  = 1;
	repeated uint64 to        = 2;
}
message SMInnerPubUserInfoChanged{
    required SMHeader header  = 1;
}

message SMInnerUserOffline{
    required SMHeader header  = 1;
}

message SMInnerReqCallOld{
    required SMHeader header  = 1;
}

message SMInnerReqUserConfigGet
{
	required SMHeader header = 1;
	repeated uint64 userid   = 2;
}

// 查询公众号
message SMInnerReqGetPubAccount
{
	required SMHeader header           = 1;
	required uint64 pubAccountId   = 2; // 公众号
}

message SMInnerRelationType
{
    required SMHeader header = 1;
    repeated uint64 userId1  = 2; // User 1
    repeated uint64 userId2  = 3; // User 2
}