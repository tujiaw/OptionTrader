// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Trade {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Trade {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_Trade_LoginReq__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.LoginReq, global::Trade.LoginReq.Builder> internal__static_Trade_LoginReq__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_LoginResp__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.LoginResp, global::Trade.LoginResp.Builder> internal__static_Trade_LoginResp__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_LogoutReq__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.LogoutReq, global::Trade.LogoutReq.Builder> internal__static_Trade_LogoutReq__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_LogoutResp__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.LogoutResp, global::Trade.LogoutResp.Builder> internal__static_Trade_LogoutResp__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_OrderReq__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.OrderReq, global::Trade.OrderReq.Builder> internal__static_Trade_OrderReq__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_OrderResp__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.OrderResp, global::Trade.OrderResp.Builder> internal__static_Trade_OrderResp__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_CancelReq__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.CancelReq, global::Trade.CancelReq.Builder> internal__static_Trade_CancelReq__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_CancelResp__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.CancelResp, global::Trade.CancelResp.Builder> internal__static_Trade_CancelResp__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_ModifyReq__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.ModifyReq, global::Trade.ModifyReq.Builder> internal__static_Trade_ModifyReq__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_ModifyResp__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.ModifyResp, global::Trade.ModifyResp.Builder> internal__static_Trade_ModifyResp__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_MarketDataReq__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.MarketDataReq, global::Trade.MarketDataReq.Builder> internal__static_Trade_MarketDataReq__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_MarketDataResp__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.MarketDataResp, global::Trade.MarketDataResp.Builder> internal__static_Trade_MarketDataResp__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_TradingAccount__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.TradingAccount, global::Trade.TradingAccount.Builder> internal__static_Trade_TradingAccount__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_MarketData__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.MarketData, global::Trade.MarketData.Builder> internal__static_Trade_MarketData__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_Position__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.Position, global::Trade.Position.Builder> internal__static_Trade_Position__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_Order__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.Order, global::Trade.Order.Builder> internal__static_Trade_Order__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_Trade__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.Trade, global::Trade.Trade.Builder> internal__static_Trade_Trade__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Trade_ErrorInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Trade.ErrorInfo, global::Trade.ErrorInfo.Builder> internal__static_Trade_ErrorInfo__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Trade() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "Cgt0cmFkZS5wcm90bxIFVHJhZGUiPwoITG9naW5SZXESDgoGdXNlcmlkGAEg", 
              "AigJEg4KBnBhc3N3ZBgCIAIoCRITCgtpbnN0cnVtZW50cxgDIAMoCSIpCglM", 
              "b2dpblJlc3ASDwoHcmV0Q29kZRgBIAIoBRILCgNtc2cYAiABKAkiCwoJTG9n", 
              "b3V0UmVxIioKCkxvZ291dFJlc3ASDwoHcmV0Q29kZRgBIAIoBRILCgNtc2cY", 
              "AiABKAkiNQoIT3JkZXJSZXESDAoEY29kZRgBIAIoCRINCgVwcmljZRgCIAIo", 
              "ARIMCgR0eXBlGAMgAigFIikKCU9yZGVyUmVzcBIPCgdyZXRDb2RlGAEgAigF", 
              "EgsKA21zZxgCIAEoCSIcCglDYW5jZWxSZXESDwoHb3JkZXJpZBgBIAIoBSIq", 
              "CgpDYW5jZWxSZXNwEg8KB3JldENvZGUYASACKAUSCwoDbXNnGAIgASgJIisK", 
              "CU1vZGlmeVJlcRIPCgdvcmRlcmlkGAEgAigFEg0KBXByaWNlGAIgAigBIioK", 
              "Ck1vZGlmeVJlc3ASDwoHcmV0Q29kZRgBIAIoBRILCgNtc2cYAiABKAkiKwoN", 
              "TWFya2V0RGF0YVJlcRIMCgRjb2RlGAEgAigJEgwKBGRhdGUYAiACKAkiTQoO", 
              "TWFya2V0RGF0YVJlc3ASDAoEY29kZRgBIAIoCRIMCgRkYXRlGAIgAigJEh8K", 
              "BGRhdGEYAyADKAsyES5UcmFkZS5NYXJrZXREYXRhIssBCg5UcmFkaW5nQWNj", 
              "b3VudBITCgtkUHJlQmFsYW5jZRgBIAEoARIXCg9kUG9zaXRpb25Qcm9maXQY", 
              "AiABKAESFAoMZENsb3NlUHJvZml0GAMgASgBEhMKC2RDb21taXNzaW9uGAQg", 
              "ASgBEhYKDmRDdXJyZW50TWFyZ2luGAUgASgBEhYKDmRGcm96ZW5DYXBpdGFs", 
              "GAYgASgBEhgKEGRBdmFpYWJsZUNhcGl0YWwYByABKAESFgoOZER5bmFtaWNF", 
              "cXVpdHkYCCABKAEioQIKCk1hcmtldERhdGESFAoMc3pJTlNUUlVNRU5UGAEg", 
              "ASgJEhIKCmRCaWRQcmljZTEYAiABKAESEwoLbkJpZFZvbHVtZTEYAyABKAUS", 
              "EgoKZEFza1ByaWNlMRgEIAEoARITCgtuQXNrVm9sdW1lMRgFIAEoBRISCgpk", 
              "TGFzdFByaWNlGAYgASgBEhEKCWRBdmdQcmljZRgHIAEoARIPCgduVm9sdW1l", 
              "GAggASgFEhAKCGRPcGVuSW50GAkgASgBEhgKEGRVcHBlckxpbWl0UHJpY2UY", 
              "CiABKAESGAoQZExvd2VyTGltaXRQcmljZRgLIAEoARIUCgxzelVwZGF0ZVRp", 
              "bWUYDCABKAkSFwoPblVwZGF0ZU1pbGxpc2VjGA0gASgFIrcBCghQb3NpdGlv", 
              "bhIUCgxzeklOU1RSVU1FTlQYASABKAkSEQoJblRyYWRlRGlyGAIgASgFEhEK", 
              "CWRBdmdQcmljZRgDIAEoARIRCgluUG9zaXRpb24YBCABKAUSGgoSblllc3Rl", 
              "cmRheVBvc2l0aW9uGAUgASgFEhYKDm5Ub2RheVBvc2l0aW9uGAYgASgFEg8K", 
              "B2RNYXJnaW4YByABKAESFwoPZFBvc2l0aW9uUHJvZml0GAggASgBIsADCgVP", 
              "cmRlchISCgpuU2Vzc2lvbklEGAEgASgFEhAKCG5PcmRlcklEGAIgASgFEhMK", 
              "C25PcmRlclN5c0lEGAMgASgFEhQKDHN6SU5TVFJVTUVOVBgEIAEoCRIUCgxz", 
              "ekV4Y2hhbmdlSUQYBSABKAkSEgoKblRyYWRlVHlwZRgGIAEoBRIRCgluVHJh", 
              "ZGVEaXIYByABKAUSFQoNblRyYWRlT3BlcmF0ZRgIIAEoBRIUCgxuT3JkZXJT", 
              "dGF0dXMYCSABKAUSEwoLZExpbWl0UHJpY2UYCiABKAESEQoJZEF2Z1ByaWNl", 
              "GAsgASgBEg8KB25Wb2x1bWUYDCABKAUSFAoMblRyYWRlVm9sdW1lGA0gASgF", 
              "EhgKEG5UcmFkZVZvbHVtZUxlZnQYDiABKAUSGAoQc3pJbnNlcnREYXRlVGlt", 
              "ZRgPIAEoCRIXCg9zelRyYWRlRGF0ZVRpbWUYECABKAkSGAoQc3pPcmRlclJl", 
              "ZkN1c3RvbRgRIAEoCRISCgpuUmVxdWVzdElEGBIgASgFEhgKEG5UaW1lc3Rh", 
              "bXBDcmVhdGUYEyABKAUSGAoQblRpbWVzdGFtcFVwZGF0ZRgUIAEoBSL1AQoF", 
              "VHJhZGUSEQoJc3pUcmFkZUlEGAEgASgJEhAKCG5PcmRlcklEGAIgASgFEhEK", 
              "CW5TeXN0ZW1JRBgDIAEoBRIUCgxzeklOU1RSVU1FTlQYBCABKAkSFAoMc3pF", 
              "eGNoYW5nZUlEGAUgASgJEhEKCW5UcmFkZURpchgGIAEoBRIVCg1uVHJhZGVP", 
              "cGVyYXRlGAcgASgFEg4KBmRQcmljZRgIIAEoARIPCgduVm9sdW1lGAkgASgF", 
              "EhMKC3N6VHJhZGVUaW1lGAogASgJEhQKDHN6VHJhZGluZ0RheRgLIAEoCRIS", 
              "CgpuUmVxdWVzdElEGAwgASgFIh8KCUVycm9ySW5mbxISCgpuUmVxdWVzdElE", 
            "GAEgASgF"));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_Trade_LoginReq__Descriptor = Descriptor.MessageTypes[0];
          internal__static_Trade_LoginReq__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.LoginReq, global::Trade.LoginReq.Builder>(internal__static_Trade_LoginReq__Descriptor,
                  new string[] { "Userid", "Passwd", "Instruments", });
          internal__static_Trade_LoginResp__Descriptor = Descriptor.MessageTypes[1];
          internal__static_Trade_LoginResp__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.LoginResp, global::Trade.LoginResp.Builder>(internal__static_Trade_LoginResp__Descriptor,
                  new string[] { "RetCode", "Msg", });
          internal__static_Trade_LogoutReq__Descriptor = Descriptor.MessageTypes[2];
          internal__static_Trade_LogoutReq__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.LogoutReq, global::Trade.LogoutReq.Builder>(internal__static_Trade_LogoutReq__Descriptor,
                  new string[] { });
          internal__static_Trade_LogoutResp__Descriptor = Descriptor.MessageTypes[3];
          internal__static_Trade_LogoutResp__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.LogoutResp, global::Trade.LogoutResp.Builder>(internal__static_Trade_LogoutResp__Descriptor,
                  new string[] { "RetCode", "Msg", });
          internal__static_Trade_OrderReq__Descriptor = Descriptor.MessageTypes[4];
          internal__static_Trade_OrderReq__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.OrderReq, global::Trade.OrderReq.Builder>(internal__static_Trade_OrderReq__Descriptor,
                  new string[] { "Code", "Price", "Type", });
          internal__static_Trade_OrderResp__Descriptor = Descriptor.MessageTypes[5];
          internal__static_Trade_OrderResp__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.OrderResp, global::Trade.OrderResp.Builder>(internal__static_Trade_OrderResp__Descriptor,
                  new string[] { "RetCode", "Msg", });
          internal__static_Trade_CancelReq__Descriptor = Descriptor.MessageTypes[6];
          internal__static_Trade_CancelReq__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.CancelReq, global::Trade.CancelReq.Builder>(internal__static_Trade_CancelReq__Descriptor,
                  new string[] { "Orderid", });
          internal__static_Trade_CancelResp__Descriptor = Descriptor.MessageTypes[7];
          internal__static_Trade_CancelResp__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.CancelResp, global::Trade.CancelResp.Builder>(internal__static_Trade_CancelResp__Descriptor,
                  new string[] { "RetCode", "Msg", });
          internal__static_Trade_ModifyReq__Descriptor = Descriptor.MessageTypes[8];
          internal__static_Trade_ModifyReq__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.ModifyReq, global::Trade.ModifyReq.Builder>(internal__static_Trade_ModifyReq__Descriptor,
                  new string[] { "Orderid", "Price", });
          internal__static_Trade_ModifyResp__Descriptor = Descriptor.MessageTypes[9];
          internal__static_Trade_ModifyResp__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.ModifyResp, global::Trade.ModifyResp.Builder>(internal__static_Trade_ModifyResp__Descriptor,
                  new string[] { "RetCode", "Msg", });
          internal__static_Trade_MarketDataReq__Descriptor = Descriptor.MessageTypes[10];
          internal__static_Trade_MarketDataReq__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.MarketDataReq, global::Trade.MarketDataReq.Builder>(internal__static_Trade_MarketDataReq__Descriptor,
                  new string[] { "Code", "Date", });
          internal__static_Trade_MarketDataResp__Descriptor = Descriptor.MessageTypes[11];
          internal__static_Trade_MarketDataResp__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.MarketDataResp, global::Trade.MarketDataResp.Builder>(internal__static_Trade_MarketDataResp__Descriptor,
                  new string[] { "Code", "Date", "Data", });
          internal__static_Trade_TradingAccount__Descriptor = Descriptor.MessageTypes[12];
          internal__static_Trade_TradingAccount__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.TradingAccount, global::Trade.TradingAccount.Builder>(internal__static_Trade_TradingAccount__Descriptor,
                  new string[] { "DPreBalance", "DPositionProfit", "DCloseProfit", "DCommission", "DCurrentMargin", "DFrozenCapital", "DAvaiableCapital", "DDynamicEquity", });
          internal__static_Trade_MarketData__Descriptor = Descriptor.MessageTypes[13];
          internal__static_Trade_MarketData__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.MarketData, global::Trade.MarketData.Builder>(internal__static_Trade_MarketData__Descriptor,
                  new string[] { "SzINSTRUMENT", "DBidPrice1", "NBidVolume1", "DAskPrice1", "NAskVolume1", "DLastPrice", "DAvgPrice", "NVolume", "DOpenInt", "DUpperLimitPrice", "DLowerLimitPrice", "SzUpdateTime", "NUpdateMillisec", });
          internal__static_Trade_Position__Descriptor = Descriptor.MessageTypes[14];
          internal__static_Trade_Position__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.Position, global::Trade.Position.Builder>(internal__static_Trade_Position__Descriptor,
                  new string[] { "SzINSTRUMENT", "NTradeDir", "DAvgPrice", "NPosition", "NYesterdayPosition", "NTodayPosition", "DMargin", "DPositionProfit", });
          internal__static_Trade_Order__Descriptor = Descriptor.MessageTypes[15];
          internal__static_Trade_Order__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.Order, global::Trade.Order.Builder>(internal__static_Trade_Order__Descriptor,
                  new string[] { "NSessionID", "NOrderID", "NOrderSysID", "SzINSTRUMENT", "SzExchangeID", "NTradeType", "NTradeDir", "NTradeOperate", "NOrderStatus", "DLimitPrice", "DAvgPrice", "NVolume", "NTradeVolume", "NTradeVolumeLeft", "SzInsertDateTime", "SzTradeDateTime", "SzOrderRefCustom", "NRequestID", "NTimestampCreate", "NTimestampUpdate", });
          internal__static_Trade_Trade__Descriptor = Descriptor.MessageTypes[16];
          internal__static_Trade_Trade__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.Trade, global::Trade.Trade.Builder>(internal__static_Trade_Trade__Descriptor,
                  new string[] { "SzTradeID", "NOrderID", "NSystemID", "SzINSTRUMENT", "SzExchangeID", "NTradeDir", "NTradeOperate", "DPrice", "NVolume", "SzTradeTime", "SzTradingDay", "NRequestID", });
          internal__static_Trade_ErrorInfo__Descriptor = Descriptor.MessageTypes[17];
          internal__static_Trade_ErrorInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Trade.ErrorInfo, global::Trade.ErrorInfo.Builder>(internal__static_Trade_ErrorInfo__Descriptor,
                  new string[] { "NRequestID", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginReq : pb::GeneratedMessage<LoginReq, LoginReq.Builder> {
    private LoginReq() { }
    private static readonly LoginReq defaultInstance = new LoginReq().MakeReadOnly();
    private static readonly string[] _loginReqFieldNames = new string[] { "instruments", "passwd", "userid" };
    private static readonly uint[] _loginReqFieldTags = new uint[] { 26, 18, 10 };
    public static LoginReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_LoginReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginReq, LoginReq.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_LoginReq__FieldAccessorTable; }
    }
    
    public const int UseridFieldNumber = 1;
    private bool hasUserid;
    private string userid_ = "";
    public bool HasUserid {
      get { return hasUserid; }
    }
    public string Userid {
      get { return userid_; }
    }
    
    public const int PasswdFieldNumber = 2;
    private bool hasPasswd;
    private string passwd_ = "";
    public bool HasPasswd {
      get { return hasPasswd; }
    }
    public string Passwd {
      get { return passwd_; }
    }
    
    public const int InstrumentsFieldNumber = 3;
    private pbc::PopsicleList<string> instruments_ = new pbc::PopsicleList<string>();
    public scg::IList<string> InstrumentsList {
      get { return pbc::Lists.AsReadOnly(instruments_); }
    }
    public int InstrumentsCount {
      get { return instruments_.Count; }
    }
    public string GetInstruments(int index) {
      return instruments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserid) return false;
        if (!hasPasswd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loginReqFieldNames;
      if (hasUserid) {
        output.WriteString(1, field_names[2], Userid);
      }
      if (hasPasswd) {
        output.WriteString(2, field_names[1], Passwd);
      }
      if (instruments_.Count > 0) {
        output.WriteStringArray(3, field_names[0], instruments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Userid);
      }
      if (hasPasswd) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Passwd);
      }
      {
        int dataSize = 0;
        foreach (string element in InstrumentsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * instruments_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LoginReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginReq MakeReadOnly() {
      instruments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginReq result;
      
      private LoginReq PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginReq original = result;
          result = new LoginReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.LoginReq.Descriptor; }
      }
      
      public override LoginReq DefaultInstanceForType {
        get { return global::Trade.LoginReq.DefaultInstance; }
      }
      
      public override LoginReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginReq) {
          return MergeFrom((LoginReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginReq other) {
        if (other == global::Trade.LoginReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserid) {
          Userid = other.Userid;
        }
        if (other.HasPasswd) {
          Passwd = other.Passwd;
        }
        if (other.instruments_.Count != 0) {
          result.instruments_.Add(other.instruments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserid = input.ReadString(ref result.userid_);
              break;
            }
            case 18: {
              result.hasPasswd = input.ReadString(ref result.passwd_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.instruments_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserid {
        get { return result.hasUserid; }
      }
      public string Userid {
        get { return result.Userid; }
        set { SetUserid(value); }
      }
      public Builder SetUserid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserid = true;
        result.userid_ = value;
        return this;
      }
      public Builder ClearUserid() {
        PrepareBuilder();
        result.hasUserid = false;
        result.userid_ = "";
        return this;
      }
      
      public bool HasPasswd {
        get { return result.hasPasswd; }
      }
      public string Passwd {
        get { return result.Passwd; }
        set { SetPasswd(value); }
      }
      public Builder SetPasswd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPasswd = true;
        result.passwd_ = value;
        return this;
      }
      public Builder ClearPasswd() {
        PrepareBuilder();
        result.hasPasswd = false;
        result.passwd_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> InstrumentsList {
        get { return PrepareBuilder().instruments_; }
      }
      public int InstrumentsCount {
        get { return result.InstrumentsCount; }
      }
      public string GetInstruments(int index) {
        return result.GetInstruments(index);
      }
      public Builder SetInstruments(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.instruments_[index] = value;
        return this;
      }
      public Builder AddInstruments(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.instruments_.Add(value);
        return this;
      }
      public Builder AddRangeInstruments(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.instruments_.Add(values);
        return this;
      }
      public Builder ClearInstruments() {
        PrepareBuilder();
        result.instruments_.Clear();
        return this;
      }
    }
    static LoginReq() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginResp : pb::GeneratedMessage<LoginResp, LoginResp.Builder> {
    private LoginResp() { }
    private static readonly LoginResp defaultInstance = new LoginResp().MakeReadOnly();
    private static readonly string[] _loginRespFieldNames = new string[] { "msg", "retCode" };
    private static readonly uint[] _loginRespFieldTags = new uint[] { 18, 8 };
    public static LoginResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_LoginResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginResp, LoginResp.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_LoginResp__FieldAccessorTable; }
    }
    
    public const int RetCodeFieldNumber = 1;
    private bool hasRetCode;
    private int retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public int RetCode {
      get { return retCode_; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loginRespFieldNames;
      if (hasRetCode) {
        output.WriteInt32(1, field_names[1], RetCode);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[0], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetCode);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LoginResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginResp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginResp result;
      
      private LoginResp PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginResp original = result;
          result = new LoginResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.LoginResp.Descriptor; }
      }
      
      public override LoginResp DefaultInstanceForType {
        get { return global::Trade.LoginResp.DefaultInstance; }
      }
      
      public override LoginResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginResp) {
          return MergeFrom((LoginResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginResp other) {
        if (other == global::Trade.LoginResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetCode) {
          RetCode = other.RetCode;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetCode = input.ReadInt32(ref result.retCode_);
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetCode {
        get { return result.hasRetCode; }
      }
      public int RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(int value) {
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = 0;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static LoginResp() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogoutReq : pb::GeneratedMessage<LogoutReq, LogoutReq.Builder> {
    private LogoutReq() { }
    private static readonly LogoutReq defaultInstance = new LogoutReq().MakeReadOnly();
    private static readonly string[] _logoutReqFieldNames = new string[] {  };
    private static readonly uint[] _logoutReqFieldTags = new uint[] {  };
    public static LogoutReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LogoutReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogoutReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_LogoutReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LogoutReq, LogoutReq.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_LogoutReq__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _logoutReqFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LogoutReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogoutReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogoutReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogoutReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogoutReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogoutReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LogoutReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LogoutReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LogoutReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogoutReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogoutReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LogoutReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LogoutReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogoutReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogoutReq result;
      
      private LogoutReq PrepareBuilder() {
        if (resultIsReadOnly) {
          LogoutReq original = result;
          result = new LogoutReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogoutReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.LogoutReq.Descriptor; }
      }
      
      public override LogoutReq DefaultInstanceForType {
        get { return global::Trade.LogoutReq.DefaultInstance; }
      }
      
      public override LogoutReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LogoutReq) {
          return MergeFrom((LogoutReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogoutReq other) {
        if (other == global::Trade.LogoutReq.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logoutReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logoutReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static LogoutReq() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogoutResp : pb::GeneratedMessage<LogoutResp, LogoutResp.Builder> {
    private LogoutResp() { }
    private static readonly LogoutResp defaultInstance = new LogoutResp().MakeReadOnly();
    private static readonly string[] _logoutRespFieldNames = new string[] { "msg", "retCode" };
    private static readonly uint[] _logoutRespFieldTags = new uint[] { 18, 8 };
    public static LogoutResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LogoutResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogoutResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_LogoutResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LogoutResp, LogoutResp.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_LogoutResp__FieldAccessorTable; }
    }
    
    public const int RetCodeFieldNumber = 1;
    private bool hasRetCode;
    private int retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public int RetCode {
      get { return retCode_; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _logoutRespFieldNames;
      if (hasRetCode) {
        output.WriteInt32(1, field_names[1], RetCode);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[0], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetCode);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LogoutResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogoutResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogoutResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogoutResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogoutResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogoutResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LogoutResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LogoutResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LogoutResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogoutResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogoutResp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LogoutResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LogoutResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogoutResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogoutResp result;
      
      private LogoutResp PrepareBuilder() {
        if (resultIsReadOnly) {
          LogoutResp original = result;
          result = new LogoutResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogoutResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.LogoutResp.Descriptor; }
      }
      
      public override LogoutResp DefaultInstanceForType {
        get { return global::Trade.LogoutResp.DefaultInstance; }
      }
      
      public override LogoutResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LogoutResp) {
          return MergeFrom((LogoutResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogoutResp other) {
        if (other == global::Trade.LogoutResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetCode) {
          RetCode = other.RetCode;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logoutRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logoutRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetCode = input.ReadInt32(ref result.retCode_);
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetCode {
        get { return result.hasRetCode; }
      }
      public int RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(int value) {
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = 0;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static LogoutResp() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OrderReq : pb::GeneratedMessage<OrderReq, OrderReq.Builder> {
    private OrderReq() { }
    private static readonly OrderReq defaultInstance = new OrderReq().MakeReadOnly();
    private static readonly string[] _orderReqFieldNames = new string[] { "code", "price", "type" };
    private static readonly uint[] _orderReqFieldTags = new uint[] { 10, 17, 24 };
    public static OrderReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OrderReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OrderReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_OrderReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OrderReq, OrderReq.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_OrderReq__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int PriceFieldNumber = 2;
    private bool hasPrice;
    private double price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public double Price {
      get { return price_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasPrice) return false;
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _orderReqFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (hasPrice) {
        output.WriteDouble(2, field_names[1], Price);
      }
      if (hasType) {
        output.WriteInt32(3, field_names[2], Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Price);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static OrderReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OrderReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OrderReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OrderReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OrderReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OrderReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<OrderReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OrderReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OrderReq result;
      
      private OrderReq PrepareBuilder() {
        if (resultIsReadOnly) {
          OrderReq original = result;
          result = new OrderReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OrderReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.OrderReq.Descriptor; }
      }
      
      public override OrderReq DefaultInstanceForType {
        get { return global::Trade.OrderReq.DefaultInstance; }
      }
      
      public override OrderReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OrderReq) {
          return MergeFrom((OrderReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OrderReq other) {
        if (other == global::Trade.OrderReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_orderReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _orderReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 17: {
              result.hasPrice = input.ReadDouble(ref result.price_);
              break;
            }
            case 24: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public double Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(double value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0D;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static OrderReq() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OrderResp : pb::GeneratedMessage<OrderResp, OrderResp.Builder> {
    private OrderResp() { }
    private static readonly OrderResp defaultInstance = new OrderResp().MakeReadOnly();
    private static readonly string[] _orderRespFieldNames = new string[] { "msg", "retCode" };
    private static readonly uint[] _orderRespFieldTags = new uint[] { 18, 8 };
    public static OrderResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OrderResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OrderResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_OrderResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OrderResp, OrderResp.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_OrderResp__FieldAccessorTable; }
    }
    
    public const int RetCodeFieldNumber = 1;
    private bool hasRetCode;
    private int retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public int RetCode {
      get { return retCode_; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _orderRespFieldNames;
      if (hasRetCode) {
        output.WriteInt32(1, field_names[1], RetCode);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[0], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetCode);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static OrderResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OrderResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OrderResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OrderResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OrderResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OrderResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OrderResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OrderResp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OrderResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<OrderResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OrderResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OrderResp result;
      
      private OrderResp PrepareBuilder() {
        if (resultIsReadOnly) {
          OrderResp original = result;
          result = new OrderResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OrderResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.OrderResp.Descriptor; }
      }
      
      public override OrderResp DefaultInstanceForType {
        get { return global::Trade.OrderResp.DefaultInstance; }
      }
      
      public override OrderResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OrderResp) {
          return MergeFrom((OrderResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OrderResp other) {
        if (other == global::Trade.OrderResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetCode) {
          RetCode = other.RetCode;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_orderRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _orderRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetCode = input.ReadInt32(ref result.retCode_);
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetCode {
        get { return result.hasRetCode; }
      }
      public int RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(int value) {
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = 0;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static OrderResp() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CancelReq : pb::GeneratedMessage<CancelReq, CancelReq.Builder> {
    private CancelReq() { }
    private static readonly CancelReq defaultInstance = new CancelReq().MakeReadOnly();
    private static readonly string[] _cancelReqFieldNames = new string[] { "orderid" };
    private static readonly uint[] _cancelReqFieldTags = new uint[] { 8 };
    public static CancelReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CancelReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CancelReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_CancelReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CancelReq, CancelReq.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_CancelReq__FieldAccessorTable; }
    }
    
    public const int OrderidFieldNumber = 1;
    private bool hasOrderid;
    private int orderid_;
    public bool HasOrderid {
      get { return hasOrderid; }
    }
    public int Orderid {
      get { return orderid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOrderid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cancelReqFieldNames;
      if (hasOrderid) {
        output.WriteInt32(1, field_names[0], Orderid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOrderid) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Orderid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CancelReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CancelReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CancelReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CancelReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CancelReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CancelReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CancelReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CancelReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CancelReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CancelReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CancelReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CancelReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CancelReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CancelReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CancelReq result;
      
      private CancelReq PrepareBuilder() {
        if (resultIsReadOnly) {
          CancelReq original = result;
          result = new CancelReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CancelReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.CancelReq.Descriptor; }
      }
      
      public override CancelReq DefaultInstanceForType {
        get { return global::Trade.CancelReq.DefaultInstance; }
      }
      
      public override CancelReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CancelReq) {
          return MergeFrom((CancelReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CancelReq other) {
        if (other == global::Trade.CancelReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOrderid) {
          Orderid = other.Orderid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cancelReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cancelReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOrderid = input.ReadInt32(ref result.orderid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOrderid {
        get { return result.hasOrderid; }
      }
      public int Orderid {
        get { return result.Orderid; }
        set { SetOrderid(value); }
      }
      public Builder SetOrderid(int value) {
        PrepareBuilder();
        result.hasOrderid = true;
        result.orderid_ = value;
        return this;
      }
      public Builder ClearOrderid() {
        PrepareBuilder();
        result.hasOrderid = false;
        result.orderid_ = 0;
        return this;
      }
    }
    static CancelReq() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CancelResp : pb::GeneratedMessage<CancelResp, CancelResp.Builder> {
    private CancelResp() { }
    private static readonly CancelResp defaultInstance = new CancelResp().MakeReadOnly();
    private static readonly string[] _cancelRespFieldNames = new string[] { "msg", "retCode" };
    private static readonly uint[] _cancelRespFieldTags = new uint[] { 18, 8 };
    public static CancelResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CancelResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CancelResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_CancelResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CancelResp, CancelResp.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_CancelResp__FieldAccessorTable; }
    }
    
    public const int RetCodeFieldNumber = 1;
    private bool hasRetCode;
    private int retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public int RetCode {
      get { return retCode_; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cancelRespFieldNames;
      if (hasRetCode) {
        output.WriteInt32(1, field_names[1], RetCode);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[0], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetCode);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CancelResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CancelResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CancelResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CancelResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CancelResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CancelResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CancelResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CancelResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CancelResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CancelResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CancelResp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CancelResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CancelResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CancelResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CancelResp result;
      
      private CancelResp PrepareBuilder() {
        if (resultIsReadOnly) {
          CancelResp original = result;
          result = new CancelResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CancelResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.CancelResp.Descriptor; }
      }
      
      public override CancelResp DefaultInstanceForType {
        get { return global::Trade.CancelResp.DefaultInstance; }
      }
      
      public override CancelResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CancelResp) {
          return MergeFrom((CancelResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CancelResp other) {
        if (other == global::Trade.CancelResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetCode) {
          RetCode = other.RetCode;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cancelRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cancelRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetCode = input.ReadInt32(ref result.retCode_);
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetCode {
        get { return result.hasRetCode; }
      }
      public int RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(int value) {
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = 0;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static CancelResp() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ModifyReq : pb::GeneratedMessage<ModifyReq, ModifyReq.Builder> {
    private ModifyReq() { }
    private static readonly ModifyReq defaultInstance = new ModifyReq().MakeReadOnly();
    private static readonly string[] _modifyReqFieldNames = new string[] { "orderid", "price" };
    private static readonly uint[] _modifyReqFieldTags = new uint[] { 8, 17 };
    public static ModifyReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ModifyReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ModifyReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_ModifyReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ModifyReq, ModifyReq.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_ModifyReq__FieldAccessorTable; }
    }
    
    public const int OrderidFieldNumber = 1;
    private bool hasOrderid;
    private int orderid_;
    public bool HasOrderid {
      get { return hasOrderid; }
    }
    public int Orderid {
      get { return orderid_; }
    }
    
    public const int PriceFieldNumber = 2;
    private bool hasPrice;
    private double price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public double Price {
      get { return price_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOrderid) return false;
        if (!hasPrice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _modifyReqFieldNames;
      if (hasOrderid) {
        output.WriteInt32(1, field_names[0], Orderid);
      }
      if (hasPrice) {
        output.WriteDouble(2, field_names[1], Price);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOrderid) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Orderid);
      }
      if (hasPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Price);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ModifyReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModifyReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModifyReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModifyReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModifyReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModifyReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ModifyReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ModifyReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ModifyReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModifyReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ModifyReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ModifyReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ModifyReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ModifyReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ModifyReq result;
      
      private ModifyReq PrepareBuilder() {
        if (resultIsReadOnly) {
          ModifyReq original = result;
          result = new ModifyReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ModifyReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.ModifyReq.Descriptor; }
      }
      
      public override ModifyReq DefaultInstanceForType {
        get { return global::Trade.ModifyReq.DefaultInstance; }
      }
      
      public override ModifyReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ModifyReq) {
          return MergeFrom((ModifyReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ModifyReq other) {
        if (other == global::Trade.ModifyReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOrderid) {
          Orderid = other.Orderid;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_modifyReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _modifyReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOrderid = input.ReadInt32(ref result.orderid_);
              break;
            }
            case 17: {
              result.hasPrice = input.ReadDouble(ref result.price_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOrderid {
        get { return result.hasOrderid; }
      }
      public int Orderid {
        get { return result.Orderid; }
        set { SetOrderid(value); }
      }
      public Builder SetOrderid(int value) {
        PrepareBuilder();
        result.hasOrderid = true;
        result.orderid_ = value;
        return this;
      }
      public Builder ClearOrderid() {
        PrepareBuilder();
        result.hasOrderid = false;
        result.orderid_ = 0;
        return this;
      }
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public double Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(double value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0D;
        return this;
      }
    }
    static ModifyReq() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ModifyResp : pb::GeneratedMessage<ModifyResp, ModifyResp.Builder> {
    private ModifyResp() { }
    private static readonly ModifyResp defaultInstance = new ModifyResp().MakeReadOnly();
    private static readonly string[] _modifyRespFieldNames = new string[] { "msg", "retCode" };
    private static readonly uint[] _modifyRespFieldTags = new uint[] { 18, 8 };
    public static ModifyResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ModifyResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ModifyResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_ModifyResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ModifyResp, ModifyResp.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_ModifyResp__FieldAccessorTable; }
    }
    
    public const int RetCodeFieldNumber = 1;
    private bool hasRetCode;
    private int retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public int RetCode {
      get { return retCode_; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _modifyRespFieldNames;
      if (hasRetCode) {
        output.WriteInt32(1, field_names[1], RetCode);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[0], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetCode);
      }
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ModifyResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModifyResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModifyResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModifyResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModifyResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModifyResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ModifyResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ModifyResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ModifyResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModifyResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ModifyResp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ModifyResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ModifyResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ModifyResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ModifyResp result;
      
      private ModifyResp PrepareBuilder() {
        if (resultIsReadOnly) {
          ModifyResp original = result;
          result = new ModifyResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ModifyResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.ModifyResp.Descriptor; }
      }
      
      public override ModifyResp DefaultInstanceForType {
        get { return global::Trade.ModifyResp.DefaultInstance; }
      }
      
      public override ModifyResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ModifyResp) {
          return MergeFrom((ModifyResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ModifyResp other) {
        if (other == global::Trade.ModifyResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetCode) {
          RetCode = other.RetCode;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_modifyRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _modifyRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetCode = input.ReadInt32(ref result.retCode_);
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetCode {
        get { return result.hasRetCode; }
      }
      public int RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(int value) {
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = 0;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static ModifyResp() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MarketDataReq : pb::GeneratedMessage<MarketDataReq, MarketDataReq.Builder> {
    private MarketDataReq() { }
    private static readonly MarketDataReq defaultInstance = new MarketDataReq().MakeReadOnly();
    private static readonly string[] _marketDataReqFieldNames = new string[] { "code", "date" };
    private static readonly uint[] _marketDataReqFieldTags = new uint[] { 10, 18 };
    public static MarketDataReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarketDataReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarketDataReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_MarketDataReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarketDataReq, MarketDataReq.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_MarketDataReq__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int DateFieldNumber = 2;
    private bool hasDate;
    private string date_ = "";
    public bool HasDate {
      get { return hasDate; }
    }
    public string Date {
      get { return date_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasDate) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _marketDataReqFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (hasDate) {
        output.WriteString(2, field_names[1], Date);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasDate) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Date);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MarketDataReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarketDataReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarketDataReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarketDataReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarketDataReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarketDataReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MarketDataReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarketDataReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarketDataReq result;
      
      private MarketDataReq PrepareBuilder() {
        if (resultIsReadOnly) {
          MarketDataReq original = result;
          result = new MarketDataReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarketDataReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.MarketDataReq.Descriptor; }
      }
      
      public override MarketDataReq DefaultInstanceForType {
        get { return global::Trade.MarketDataReq.DefaultInstance; }
      }
      
      public override MarketDataReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarketDataReq) {
          return MergeFrom((MarketDataReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarketDataReq other) {
        if (other == global::Trade.MarketDataReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasDate) {
          Date = other.Date;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_marketDataReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _marketDataReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 18: {
              result.hasDate = input.ReadString(ref result.date_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public string Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = "";
        return this;
      }
    }
    static MarketDataReq() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MarketDataResp : pb::GeneratedMessage<MarketDataResp, MarketDataResp.Builder> {
    private MarketDataResp() { }
    private static readonly MarketDataResp defaultInstance = new MarketDataResp().MakeReadOnly();
    private static readonly string[] _marketDataRespFieldNames = new string[] { "code", "data", "date" };
    private static readonly uint[] _marketDataRespFieldTags = new uint[] { 10, 26, 18 };
    public static MarketDataResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarketDataResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarketDataResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_MarketDataResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarketDataResp, MarketDataResp.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_MarketDataResp__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int DateFieldNumber = 2;
    private bool hasDate;
    private string date_ = "";
    public bool HasDate {
      get { return hasDate; }
    }
    public string Date {
      get { return date_; }
    }
    
    public const int DataFieldNumber = 3;
    private pbc::PopsicleList<global::Trade.MarketData> data_ = new pbc::PopsicleList<global::Trade.MarketData>();
    public scg::IList<global::Trade.MarketData> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::Trade.MarketData GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasDate) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _marketDataRespFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (hasDate) {
        output.WriteString(2, field_names[2], Date);
      }
      if (data_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasDate) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Date);
      }
      foreach (global::Trade.MarketData element in DataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MarketDataResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketDataResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketDataResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarketDataResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarketDataResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarketDataResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketDataResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarketDataResp MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarketDataResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MarketDataResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarketDataResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarketDataResp result;
      
      private MarketDataResp PrepareBuilder() {
        if (resultIsReadOnly) {
          MarketDataResp original = result;
          result = new MarketDataResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarketDataResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.MarketDataResp.Descriptor; }
      }
      
      public override MarketDataResp DefaultInstanceForType {
        get { return global::Trade.MarketDataResp.DefaultInstance; }
      }
      
      public override MarketDataResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarketDataResp) {
          return MergeFrom((MarketDataResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarketDataResp other) {
        if (other == global::Trade.MarketDataResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasDate) {
          Date = other.Date;
        }
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_marketDataRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _marketDataRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 18: {
              result.hasDate = input.ReadString(ref result.date_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.data_, global::Trade.MarketData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public string Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Trade.MarketData> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::Trade.MarketData GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::Trade.MarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::Trade.MarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::Trade.MarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::Trade.MarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::Trade.MarketData> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static MarketDataResp() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TradingAccount : pb::GeneratedMessage<TradingAccount, TradingAccount.Builder> {
    private TradingAccount() { }
    private static readonly TradingAccount defaultInstance = new TradingAccount().MakeReadOnly();
    private static readonly string[] _tradingAccountFieldNames = new string[] { "dAvaiableCapital", "dCloseProfit", "dCommission", "dCurrentMargin", "dDynamicEquity", "dFrozenCapital", "dPositionProfit", "dPreBalance" };
    private static readonly uint[] _tradingAccountFieldTags = new uint[] { 57, 25, 33, 41, 65, 49, 17, 9 };
    public static TradingAccount DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TradingAccount DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TradingAccount ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_TradingAccount__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TradingAccount, TradingAccount.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_TradingAccount__FieldAccessorTable; }
    }
    
    public const int DPreBalanceFieldNumber = 1;
    private bool hasDPreBalance;
    private double dPreBalance_;
    public bool HasDPreBalance {
      get { return hasDPreBalance; }
    }
    public double DPreBalance {
      get { return dPreBalance_; }
    }
    
    public const int DPositionProfitFieldNumber = 2;
    private bool hasDPositionProfit;
    private double dPositionProfit_;
    public bool HasDPositionProfit {
      get { return hasDPositionProfit; }
    }
    public double DPositionProfit {
      get { return dPositionProfit_; }
    }
    
    public const int DCloseProfitFieldNumber = 3;
    private bool hasDCloseProfit;
    private double dCloseProfit_;
    public bool HasDCloseProfit {
      get { return hasDCloseProfit; }
    }
    public double DCloseProfit {
      get { return dCloseProfit_; }
    }
    
    public const int DCommissionFieldNumber = 4;
    private bool hasDCommission;
    private double dCommission_;
    public bool HasDCommission {
      get { return hasDCommission; }
    }
    public double DCommission {
      get { return dCommission_; }
    }
    
    public const int DCurrentMarginFieldNumber = 5;
    private bool hasDCurrentMargin;
    private double dCurrentMargin_;
    public bool HasDCurrentMargin {
      get { return hasDCurrentMargin; }
    }
    public double DCurrentMargin {
      get { return dCurrentMargin_; }
    }
    
    public const int DFrozenCapitalFieldNumber = 6;
    private bool hasDFrozenCapital;
    private double dFrozenCapital_;
    public bool HasDFrozenCapital {
      get { return hasDFrozenCapital; }
    }
    public double DFrozenCapital {
      get { return dFrozenCapital_; }
    }
    
    public const int DAvaiableCapitalFieldNumber = 7;
    private bool hasDAvaiableCapital;
    private double dAvaiableCapital_;
    public bool HasDAvaiableCapital {
      get { return hasDAvaiableCapital; }
    }
    public double DAvaiableCapital {
      get { return dAvaiableCapital_; }
    }
    
    public const int DDynamicEquityFieldNumber = 8;
    private bool hasDDynamicEquity;
    private double dDynamicEquity_;
    public bool HasDDynamicEquity {
      get { return hasDDynamicEquity; }
    }
    public double DDynamicEquity {
      get { return dDynamicEquity_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tradingAccountFieldNames;
      if (hasDPreBalance) {
        output.WriteDouble(1, field_names[7], DPreBalance);
      }
      if (hasDPositionProfit) {
        output.WriteDouble(2, field_names[6], DPositionProfit);
      }
      if (hasDCloseProfit) {
        output.WriteDouble(3, field_names[1], DCloseProfit);
      }
      if (hasDCommission) {
        output.WriteDouble(4, field_names[2], DCommission);
      }
      if (hasDCurrentMargin) {
        output.WriteDouble(5, field_names[3], DCurrentMargin);
      }
      if (hasDFrozenCapital) {
        output.WriteDouble(6, field_names[5], DFrozenCapital);
      }
      if (hasDAvaiableCapital) {
        output.WriteDouble(7, field_names[0], DAvaiableCapital);
      }
      if (hasDDynamicEquity) {
        output.WriteDouble(8, field_names[4], DDynamicEquity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDPreBalance) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, DPreBalance);
      }
      if (hasDPositionProfit) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, DPositionProfit);
      }
      if (hasDCloseProfit) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, DCloseProfit);
      }
      if (hasDCommission) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, DCommission);
      }
      if (hasDCurrentMargin) {
        size += pb::CodedOutputStream.ComputeDoubleSize(5, DCurrentMargin);
      }
      if (hasDFrozenCapital) {
        size += pb::CodedOutputStream.ComputeDoubleSize(6, DFrozenCapital);
      }
      if (hasDAvaiableCapital) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, DAvaiableCapital);
      }
      if (hasDDynamicEquity) {
        size += pb::CodedOutputStream.ComputeDoubleSize(8, DDynamicEquity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TradingAccount ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TradingAccount ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TradingAccount ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TradingAccount ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TradingAccount ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TradingAccount ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TradingAccount ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TradingAccount ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TradingAccount ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TradingAccount ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TradingAccount MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TradingAccount prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TradingAccount, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TradingAccount cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TradingAccount result;
      
      private TradingAccount PrepareBuilder() {
        if (resultIsReadOnly) {
          TradingAccount original = result;
          result = new TradingAccount();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TradingAccount MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.TradingAccount.Descriptor; }
      }
      
      public override TradingAccount DefaultInstanceForType {
        get { return global::Trade.TradingAccount.DefaultInstance; }
      }
      
      public override TradingAccount BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TradingAccount) {
          return MergeFrom((TradingAccount) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TradingAccount other) {
        if (other == global::Trade.TradingAccount.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDPreBalance) {
          DPreBalance = other.DPreBalance;
        }
        if (other.HasDPositionProfit) {
          DPositionProfit = other.DPositionProfit;
        }
        if (other.HasDCloseProfit) {
          DCloseProfit = other.DCloseProfit;
        }
        if (other.HasDCommission) {
          DCommission = other.DCommission;
        }
        if (other.HasDCurrentMargin) {
          DCurrentMargin = other.DCurrentMargin;
        }
        if (other.HasDFrozenCapital) {
          DFrozenCapital = other.DFrozenCapital;
        }
        if (other.HasDAvaiableCapital) {
          DAvaiableCapital = other.DAvaiableCapital;
        }
        if (other.HasDDynamicEquity) {
          DDynamicEquity = other.DDynamicEquity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tradingAccountFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tradingAccountFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasDPreBalance = input.ReadDouble(ref result.dPreBalance_);
              break;
            }
            case 17: {
              result.hasDPositionProfit = input.ReadDouble(ref result.dPositionProfit_);
              break;
            }
            case 25: {
              result.hasDCloseProfit = input.ReadDouble(ref result.dCloseProfit_);
              break;
            }
            case 33: {
              result.hasDCommission = input.ReadDouble(ref result.dCommission_);
              break;
            }
            case 41: {
              result.hasDCurrentMargin = input.ReadDouble(ref result.dCurrentMargin_);
              break;
            }
            case 49: {
              result.hasDFrozenCapital = input.ReadDouble(ref result.dFrozenCapital_);
              break;
            }
            case 57: {
              result.hasDAvaiableCapital = input.ReadDouble(ref result.dAvaiableCapital_);
              break;
            }
            case 65: {
              result.hasDDynamicEquity = input.ReadDouble(ref result.dDynamicEquity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDPreBalance {
        get { return result.hasDPreBalance; }
      }
      public double DPreBalance {
        get { return result.DPreBalance; }
        set { SetDPreBalance(value); }
      }
      public Builder SetDPreBalance(double value) {
        PrepareBuilder();
        result.hasDPreBalance = true;
        result.dPreBalance_ = value;
        return this;
      }
      public Builder ClearDPreBalance() {
        PrepareBuilder();
        result.hasDPreBalance = false;
        result.dPreBalance_ = 0D;
        return this;
      }
      
      public bool HasDPositionProfit {
        get { return result.hasDPositionProfit; }
      }
      public double DPositionProfit {
        get { return result.DPositionProfit; }
        set { SetDPositionProfit(value); }
      }
      public Builder SetDPositionProfit(double value) {
        PrepareBuilder();
        result.hasDPositionProfit = true;
        result.dPositionProfit_ = value;
        return this;
      }
      public Builder ClearDPositionProfit() {
        PrepareBuilder();
        result.hasDPositionProfit = false;
        result.dPositionProfit_ = 0D;
        return this;
      }
      
      public bool HasDCloseProfit {
        get { return result.hasDCloseProfit; }
      }
      public double DCloseProfit {
        get { return result.DCloseProfit; }
        set { SetDCloseProfit(value); }
      }
      public Builder SetDCloseProfit(double value) {
        PrepareBuilder();
        result.hasDCloseProfit = true;
        result.dCloseProfit_ = value;
        return this;
      }
      public Builder ClearDCloseProfit() {
        PrepareBuilder();
        result.hasDCloseProfit = false;
        result.dCloseProfit_ = 0D;
        return this;
      }
      
      public bool HasDCommission {
        get { return result.hasDCommission; }
      }
      public double DCommission {
        get { return result.DCommission; }
        set { SetDCommission(value); }
      }
      public Builder SetDCommission(double value) {
        PrepareBuilder();
        result.hasDCommission = true;
        result.dCommission_ = value;
        return this;
      }
      public Builder ClearDCommission() {
        PrepareBuilder();
        result.hasDCommission = false;
        result.dCommission_ = 0D;
        return this;
      }
      
      public bool HasDCurrentMargin {
        get { return result.hasDCurrentMargin; }
      }
      public double DCurrentMargin {
        get { return result.DCurrentMargin; }
        set { SetDCurrentMargin(value); }
      }
      public Builder SetDCurrentMargin(double value) {
        PrepareBuilder();
        result.hasDCurrentMargin = true;
        result.dCurrentMargin_ = value;
        return this;
      }
      public Builder ClearDCurrentMargin() {
        PrepareBuilder();
        result.hasDCurrentMargin = false;
        result.dCurrentMargin_ = 0D;
        return this;
      }
      
      public bool HasDFrozenCapital {
        get { return result.hasDFrozenCapital; }
      }
      public double DFrozenCapital {
        get { return result.DFrozenCapital; }
        set { SetDFrozenCapital(value); }
      }
      public Builder SetDFrozenCapital(double value) {
        PrepareBuilder();
        result.hasDFrozenCapital = true;
        result.dFrozenCapital_ = value;
        return this;
      }
      public Builder ClearDFrozenCapital() {
        PrepareBuilder();
        result.hasDFrozenCapital = false;
        result.dFrozenCapital_ = 0D;
        return this;
      }
      
      public bool HasDAvaiableCapital {
        get { return result.hasDAvaiableCapital; }
      }
      public double DAvaiableCapital {
        get { return result.DAvaiableCapital; }
        set { SetDAvaiableCapital(value); }
      }
      public Builder SetDAvaiableCapital(double value) {
        PrepareBuilder();
        result.hasDAvaiableCapital = true;
        result.dAvaiableCapital_ = value;
        return this;
      }
      public Builder ClearDAvaiableCapital() {
        PrepareBuilder();
        result.hasDAvaiableCapital = false;
        result.dAvaiableCapital_ = 0D;
        return this;
      }
      
      public bool HasDDynamicEquity {
        get { return result.hasDDynamicEquity; }
      }
      public double DDynamicEquity {
        get { return result.DDynamicEquity; }
        set { SetDDynamicEquity(value); }
      }
      public Builder SetDDynamicEquity(double value) {
        PrepareBuilder();
        result.hasDDynamicEquity = true;
        result.dDynamicEquity_ = value;
        return this;
      }
      public Builder ClearDDynamicEquity() {
        PrepareBuilder();
        result.hasDDynamicEquity = false;
        result.dDynamicEquity_ = 0D;
        return this;
      }
    }
    static TradingAccount() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MarketData : pb::GeneratedMessage<MarketData, MarketData.Builder> {
    private MarketData() { }
    private static readonly MarketData defaultInstance = new MarketData().MakeReadOnly();
    private static readonly string[] _marketDataFieldNames = new string[] { "dAskPrice1", "dAvgPrice", "dBidPrice1", "dLastPrice", "dLowerLimitPrice", "dOpenInt", "dUpperLimitPrice", "nAskVolume1", "nBidVolume1", "nUpdateMillisec", "nVolume", "szINSTRUMENT", "szUpdateTime" };
    private static readonly uint[] _marketDataFieldTags = new uint[] { 33, 57, 17, 49, 89, 73, 81, 40, 24, 104, 64, 10, 98 };
    public static MarketData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarketData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarketData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_MarketData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarketData, MarketData.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_MarketData__FieldAccessorTable; }
    }
    
    public const int SzINSTRUMENTFieldNumber = 1;
    private bool hasSzINSTRUMENT;
    private string szINSTRUMENT_ = "";
    public bool HasSzINSTRUMENT {
      get { return hasSzINSTRUMENT; }
    }
    public string SzINSTRUMENT {
      get { return szINSTRUMENT_; }
    }
    
    public const int DBidPrice1FieldNumber = 2;
    private bool hasDBidPrice1;
    private double dBidPrice1_;
    public bool HasDBidPrice1 {
      get { return hasDBidPrice1; }
    }
    public double DBidPrice1 {
      get { return dBidPrice1_; }
    }
    
    public const int NBidVolume1FieldNumber = 3;
    private bool hasNBidVolume1;
    private int nBidVolume1_;
    public bool HasNBidVolume1 {
      get { return hasNBidVolume1; }
    }
    public int NBidVolume1 {
      get { return nBidVolume1_; }
    }
    
    public const int DAskPrice1FieldNumber = 4;
    private bool hasDAskPrice1;
    private double dAskPrice1_;
    public bool HasDAskPrice1 {
      get { return hasDAskPrice1; }
    }
    public double DAskPrice1 {
      get { return dAskPrice1_; }
    }
    
    public const int NAskVolume1FieldNumber = 5;
    private bool hasNAskVolume1;
    private int nAskVolume1_;
    public bool HasNAskVolume1 {
      get { return hasNAskVolume1; }
    }
    public int NAskVolume1 {
      get { return nAskVolume1_; }
    }
    
    public const int DLastPriceFieldNumber = 6;
    private bool hasDLastPrice;
    private double dLastPrice_;
    public bool HasDLastPrice {
      get { return hasDLastPrice; }
    }
    public double DLastPrice {
      get { return dLastPrice_; }
    }
    
    public const int DAvgPriceFieldNumber = 7;
    private bool hasDAvgPrice;
    private double dAvgPrice_;
    public bool HasDAvgPrice {
      get { return hasDAvgPrice; }
    }
    public double DAvgPrice {
      get { return dAvgPrice_; }
    }
    
    public const int NVolumeFieldNumber = 8;
    private bool hasNVolume;
    private int nVolume_;
    public bool HasNVolume {
      get { return hasNVolume; }
    }
    public int NVolume {
      get { return nVolume_; }
    }
    
    public const int DOpenIntFieldNumber = 9;
    private bool hasDOpenInt;
    private double dOpenInt_;
    public bool HasDOpenInt {
      get { return hasDOpenInt; }
    }
    public double DOpenInt {
      get { return dOpenInt_; }
    }
    
    public const int DUpperLimitPriceFieldNumber = 10;
    private bool hasDUpperLimitPrice;
    private double dUpperLimitPrice_;
    public bool HasDUpperLimitPrice {
      get { return hasDUpperLimitPrice; }
    }
    public double DUpperLimitPrice {
      get { return dUpperLimitPrice_; }
    }
    
    public const int DLowerLimitPriceFieldNumber = 11;
    private bool hasDLowerLimitPrice;
    private double dLowerLimitPrice_;
    public bool HasDLowerLimitPrice {
      get { return hasDLowerLimitPrice; }
    }
    public double DLowerLimitPrice {
      get { return dLowerLimitPrice_; }
    }
    
    public const int SzUpdateTimeFieldNumber = 12;
    private bool hasSzUpdateTime;
    private string szUpdateTime_ = "";
    public bool HasSzUpdateTime {
      get { return hasSzUpdateTime; }
    }
    public string SzUpdateTime {
      get { return szUpdateTime_; }
    }
    
    public const int NUpdateMillisecFieldNumber = 13;
    private bool hasNUpdateMillisec;
    private int nUpdateMillisec_;
    public bool HasNUpdateMillisec {
      get { return hasNUpdateMillisec; }
    }
    public int NUpdateMillisec {
      get { return nUpdateMillisec_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _marketDataFieldNames;
      if (hasSzINSTRUMENT) {
        output.WriteString(1, field_names[11], SzINSTRUMENT);
      }
      if (hasDBidPrice1) {
        output.WriteDouble(2, field_names[2], DBidPrice1);
      }
      if (hasNBidVolume1) {
        output.WriteInt32(3, field_names[8], NBidVolume1);
      }
      if (hasDAskPrice1) {
        output.WriteDouble(4, field_names[0], DAskPrice1);
      }
      if (hasNAskVolume1) {
        output.WriteInt32(5, field_names[7], NAskVolume1);
      }
      if (hasDLastPrice) {
        output.WriteDouble(6, field_names[3], DLastPrice);
      }
      if (hasDAvgPrice) {
        output.WriteDouble(7, field_names[1], DAvgPrice);
      }
      if (hasNVolume) {
        output.WriteInt32(8, field_names[10], NVolume);
      }
      if (hasDOpenInt) {
        output.WriteDouble(9, field_names[5], DOpenInt);
      }
      if (hasDUpperLimitPrice) {
        output.WriteDouble(10, field_names[6], DUpperLimitPrice);
      }
      if (hasDLowerLimitPrice) {
        output.WriteDouble(11, field_names[4], DLowerLimitPrice);
      }
      if (hasSzUpdateTime) {
        output.WriteString(12, field_names[12], SzUpdateTime);
      }
      if (hasNUpdateMillisec) {
        output.WriteInt32(13, field_names[9], NUpdateMillisec);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSzINSTRUMENT) {
        size += pb::CodedOutputStream.ComputeStringSize(1, SzINSTRUMENT);
      }
      if (hasDBidPrice1) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, DBidPrice1);
      }
      if (hasNBidVolume1) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, NBidVolume1);
      }
      if (hasDAskPrice1) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, DAskPrice1);
      }
      if (hasNAskVolume1) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, NAskVolume1);
      }
      if (hasDLastPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(6, DLastPrice);
      }
      if (hasDAvgPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, DAvgPrice);
      }
      if (hasNVolume) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, NVolume);
      }
      if (hasDOpenInt) {
        size += pb::CodedOutputStream.ComputeDoubleSize(9, DOpenInt);
      }
      if (hasDUpperLimitPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(10, DUpperLimitPrice);
      }
      if (hasDLowerLimitPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(11, DLowerLimitPrice);
      }
      if (hasSzUpdateTime) {
        size += pb::CodedOutputStream.ComputeStringSize(12, SzUpdateTime);
      }
      if (hasNUpdateMillisec) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, NUpdateMillisec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MarketData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarketData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarketData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarketData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarketData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarketData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarketData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarketData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarketData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MarketData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarketData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarketData result;
      
      private MarketData PrepareBuilder() {
        if (resultIsReadOnly) {
          MarketData original = result;
          result = new MarketData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarketData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.MarketData.Descriptor; }
      }
      
      public override MarketData DefaultInstanceForType {
        get { return global::Trade.MarketData.DefaultInstance; }
      }
      
      public override MarketData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarketData) {
          return MergeFrom((MarketData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarketData other) {
        if (other == global::Trade.MarketData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSzINSTRUMENT) {
          SzINSTRUMENT = other.SzINSTRUMENT;
        }
        if (other.HasDBidPrice1) {
          DBidPrice1 = other.DBidPrice1;
        }
        if (other.HasNBidVolume1) {
          NBidVolume1 = other.NBidVolume1;
        }
        if (other.HasDAskPrice1) {
          DAskPrice1 = other.DAskPrice1;
        }
        if (other.HasNAskVolume1) {
          NAskVolume1 = other.NAskVolume1;
        }
        if (other.HasDLastPrice) {
          DLastPrice = other.DLastPrice;
        }
        if (other.HasDAvgPrice) {
          DAvgPrice = other.DAvgPrice;
        }
        if (other.HasNVolume) {
          NVolume = other.NVolume;
        }
        if (other.HasDOpenInt) {
          DOpenInt = other.DOpenInt;
        }
        if (other.HasDUpperLimitPrice) {
          DUpperLimitPrice = other.DUpperLimitPrice;
        }
        if (other.HasDLowerLimitPrice) {
          DLowerLimitPrice = other.DLowerLimitPrice;
        }
        if (other.HasSzUpdateTime) {
          SzUpdateTime = other.SzUpdateTime;
        }
        if (other.HasNUpdateMillisec) {
          NUpdateMillisec = other.NUpdateMillisec;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_marketDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _marketDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSzINSTRUMENT = input.ReadString(ref result.szINSTRUMENT_);
              break;
            }
            case 17: {
              result.hasDBidPrice1 = input.ReadDouble(ref result.dBidPrice1_);
              break;
            }
            case 24: {
              result.hasNBidVolume1 = input.ReadInt32(ref result.nBidVolume1_);
              break;
            }
            case 33: {
              result.hasDAskPrice1 = input.ReadDouble(ref result.dAskPrice1_);
              break;
            }
            case 40: {
              result.hasNAskVolume1 = input.ReadInt32(ref result.nAskVolume1_);
              break;
            }
            case 49: {
              result.hasDLastPrice = input.ReadDouble(ref result.dLastPrice_);
              break;
            }
            case 57: {
              result.hasDAvgPrice = input.ReadDouble(ref result.dAvgPrice_);
              break;
            }
            case 64: {
              result.hasNVolume = input.ReadInt32(ref result.nVolume_);
              break;
            }
            case 73: {
              result.hasDOpenInt = input.ReadDouble(ref result.dOpenInt_);
              break;
            }
            case 81: {
              result.hasDUpperLimitPrice = input.ReadDouble(ref result.dUpperLimitPrice_);
              break;
            }
            case 89: {
              result.hasDLowerLimitPrice = input.ReadDouble(ref result.dLowerLimitPrice_);
              break;
            }
            case 98: {
              result.hasSzUpdateTime = input.ReadString(ref result.szUpdateTime_);
              break;
            }
            case 104: {
              result.hasNUpdateMillisec = input.ReadInt32(ref result.nUpdateMillisec_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSzINSTRUMENT {
        get { return result.hasSzINSTRUMENT; }
      }
      public string SzINSTRUMENT {
        get { return result.SzINSTRUMENT; }
        set { SetSzINSTRUMENT(value); }
      }
      public Builder SetSzINSTRUMENT(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzINSTRUMENT = true;
        result.szINSTRUMENT_ = value;
        return this;
      }
      public Builder ClearSzINSTRUMENT() {
        PrepareBuilder();
        result.hasSzINSTRUMENT = false;
        result.szINSTRUMENT_ = "";
        return this;
      }
      
      public bool HasDBidPrice1 {
        get { return result.hasDBidPrice1; }
      }
      public double DBidPrice1 {
        get { return result.DBidPrice1; }
        set { SetDBidPrice1(value); }
      }
      public Builder SetDBidPrice1(double value) {
        PrepareBuilder();
        result.hasDBidPrice1 = true;
        result.dBidPrice1_ = value;
        return this;
      }
      public Builder ClearDBidPrice1() {
        PrepareBuilder();
        result.hasDBidPrice1 = false;
        result.dBidPrice1_ = 0D;
        return this;
      }
      
      public bool HasNBidVolume1 {
        get { return result.hasNBidVolume1; }
      }
      public int NBidVolume1 {
        get { return result.NBidVolume1; }
        set { SetNBidVolume1(value); }
      }
      public Builder SetNBidVolume1(int value) {
        PrepareBuilder();
        result.hasNBidVolume1 = true;
        result.nBidVolume1_ = value;
        return this;
      }
      public Builder ClearNBidVolume1() {
        PrepareBuilder();
        result.hasNBidVolume1 = false;
        result.nBidVolume1_ = 0;
        return this;
      }
      
      public bool HasDAskPrice1 {
        get { return result.hasDAskPrice1; }
      }
      public double DAskPrice1 {
        get { return result.DAskPrice1; }
        set { SetDAskPrice1(value); }
      }
      public Builder SetDAskPrice1(double value) {
        PrepareBuilder();
        result.hasDAskPrice1 = true;
        result.dAskPrice1_ = value;
        return this;
      }
      public Builder ClearDAskPrice1() {
        PrepareBuilder();
        result.hasDAskPrice1 = false;
        result.dAskPrice1_ = 0D;
        return this;
      }
      
      public bool HasNAskVolume1 {
        get { return result.hasNAskVolume1; }
      }
      public int NAskVolume1 {
        get { return result.NAskVolume1; }
        set { SetNAskVolume1(value); }
      }
      public Builder SetNAskVolume1(int value) {
        PrepareBuilder();
        result.hasNAskVolume1 = true;
        result.nAskVolume1_ = value;
        return this;
      }
      public Builder ClearNAskVolume1() {
        PrepareBuilder();
        result.hasNAskVolume1 = false;
        result.nAskVolume1_ = 0;
        return this;
      }
      
      public bool HasDLastPrice {
        get { return result.hasDLastPrice; }
      }
      public double DLastPrice {
        get { return result.DLastPrice; }
        set { SetDLastPrice(value); }
      }
      public Builder SetDLastPrice(double value) {
        PrepareBuilder();
        result.hasDLastPrice = true;
        result.dLastPrice_ = value;
        return this;
      }
      public Builder ClearDLastPrice() {
        PrepareBuilder();
        result.hasDLastPrice = false;
        result.dLastPrice_ = 0D;
        return this;
      }
      
      public bool HasDAvgPrice {
        get { return result.hasDAvgPrice; }
      }
      public double DAvgPrice {
        get { return result.DAvgPrice; }
        set { SetDAvgPrice(value); }
      }
      public Builder SetDAvgPrice(double value) {
        PrepareBuilder();
        result.hasDAvgPrice = true;
        result.dAvgPrice_ = value;
        return this;
      }
      public Builder ClearDAvgPrice() {
        PrepareBuilder();
        result.hasDAvgPrice = false;
        result.dAvgPrice_ = 0D;
        return this;
      }
      
      public bool HasNVolume {
        get { return result.hasNVolume; }
      }
      public int NVolume {
        get { return result.NVolume; }
        set { SetNVolume(value); }
      }
      public Builder SetNVolume(int value) {
        PrepareBuilder();
        result.hasNVolume = true;
        result.nVolume_ = value;
        return this;
      }
      public Builder ClearNVolume() {
        PrepareBuilder();
        result.hasNVolume = false;
        result.nVolume_ = 0;
        return this;
      }
      
      public bool HasDOpenInt {
        get { return result.hasDOpenInt; }
      }
      public double DOpenInt {
        get { return result.DOpenInt; }
        set { SetDOpenInt(value); }
      }
      public Builder SetDOpenInt(double value) {
        PrepareBuilder();
        result.hasDOpenInt = true;
        result.dOpenInt_ = value;
        return this;
      }
      public Builder ClearDOpenInt() {
        PrepareBuilder();
        result.hasDOpenInt = false;
        result.dOpenInt_ = 0D;
        return this;
      }
      
      public bool HasDUpperLimitPrice {
        get { return result.hasDUpperLimitPrice; }
      }
      public double DUpperLimitPrice {
        get { return result.DUpperLimitPrice; }
        set { SetDUpperLimitPrice(value); }
      }
      public Builder SetDUpperLimitPrice(double value) {
        PrepareBuilder();
        result.hasDUpperLimitPrice = true;
        result.dUpperLimitPrice_ = value;
        return this;
      }
      public Builder ClearDUpperLimitPrice() {
        PrepareBuilder();
        result.hasDUpperLimitPrice = false;
        result.dUpperLimitPrice_ = 0D;
        return this;
      }
      
      public bool HasDLowerLimitPrice {
        get { return result.hasDLowerLimitPrice; }
      }
      public double DLowerLimitPrice {
        get { return result.DLowerLimitPrice; }
        set { SetDLowerLimitPrice(value); }
      }
      public Builder SetDLowerLimitPrice(double value) {
        PrepareBuilder();
        result.hasDLowerLimitPrice = true;
        result.dLowerLimitPrice_ = value;
        return this;
      }
      public Builder ClearDLowerLimitPrice() {
        PrepareBuilder();
        result.hasDLowerLimitPrice = false;
        result.dLowerLimitPrice_ = 0D;
        return this;
      }
      
      public bool HasSzUpdateTime {
        get { return result.hasSzUpdateTime; }
      }
      public string SzUpdateTime {
        get { return result.SzUpdateTime; }
        set { SetSzUpdateTime(value); }
      }
      public Builder SetSzUpdateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzUpdateTime = true;
        result.szUpdateTime_ = value;
        return this;
      }
      public Builder ClearSzUpdateTime() {
        PrepareBuilder();
        result.hasSzUpdateTime = false;
        result.szUpdateTime_ = "";
        return this;
      }
      
      public bool HasNUpdateMillisec {
        get { return result.hasNUpdateMillisec; }
      }
      public int NUpdateMillisec {
        get { return result.NUpdateMillisec; }
        set { SetNUpdateMillisec(value); }
      }
      public Builder SetNUpdateMillisec(int value) {
        PrepareBuilder();
        result.hasNUpdateMillisec = true;
        result.nUpdateMillisec_ = value;
        return this;
      }
      public Builder ClearNUpdateMillisec() {
        PrepareBuilder();
        result.hasNUpdateMillisec = false;
        result.nUpdateMillisec_ = 0;
        return this;
      }
    }
    static MarketData() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
    private Position() { }
    private static readonly Position defaultInstance = new Position().MakeReadOnly();
    private static readonly string[] _positionFieldNames = new string[] { "dAvgPrice", "dMargin", "dPositionProfit", "nPosition", "nTodayPosition", "nTradeDir", "nYesterdayPosition", "szINSTRUMENT" };
    private static readonly uint[] _positionFieldTags = new uint[] { 25, 57, 65, 32, 48, 16, 40, 10 };
    public static Position DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Position DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Position ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_Position__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_Position__FieldAccessorTable; }
    }
    
    public const int SzINSTRUMENTFieldNumber = 1;
    private bool hasSzINSTRUMENT;
    private string szINSTRUMENT_ = "";
    public bool HasSzINSTRUMENT {
      get { return hasSzINSTRUMENT; }
    }
    public string SzINSTRUMENT {
      get { return szINSTRUMENT_; }
    }
    
    public const int NTradeDirFieldNumber = 2;
    private bool hasNTradeDir;
    private int nTradeDir_;
    public bool HasNTradeDir {
      get { return hasNTradeDir; }
    }
    public int NTradeDir {
      get { return nTradeDir_; }
    }
    
    public const int DAvgPriceFieldNumber = 3;
    private bool hasDAvgPrice;
    private double dAvgPrice_;
    public bool HasDAvgPrice {
      get { return hasDAvgPrice; }
    }
    public double DAvgPrice {
      get { return dAvgPrice_; }
    }
    
    public const int NPositionFieldNumber = 4;
    private bool hasNPosition;
    private int nPosition_;
    public bool HasNPosition {
      get { return hasNPosition; }
    }
    public int NPosition {
      get { return nPosition_; }
    }
    
    public const int NYesterdayPositionFieldNumber = 5;
    private bool hasNYesterdayPosition;
    private int nYesterdayPosition_;
    public bool HasNYesterdayPosition {
      get { return hasNYesterdayPosition; }
    }
    public int NYesterdayPosition {
      get { return nYesterdayPosition_; }
    }
    
    public const int NTodayPositionFieldNumber = 6;
    private bool hasNTodayPosition;
    private int nTodayPosition_;
    public bool HasNTodayPosition {
      get { return hasNTodayPosition; }
    }
    public int NTodayPosition {
      get { return nTodayPosition_; }
    }
    
    public const int DMarginFieldNumber = 7;
    private bool hasDMargin;
    private double dMargin_;
    public bool HasDMargin {
      get { return hasDMargin; }
    }
    public double DMargin {
      get { return dMargin_; }
    }
    
    public const int DPositionProfitFieldNumber = 8;
    private bool hasDPositionProfit;
    private double dPositionProfit_;
    public bool HasDPositionProfit {
      get { return hasDPositionProfit; }
    }
    public double DPositionProfit {
      get { return dPositionProfit_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _positionFieldNames;
      if (hasSzINSTRUMENT) {
        output.WriteString(1, field_names[7], SzINSTRUMENT);
      }
      if (hasNTradeDir) {
        output.WriteInt32(2, field_names[5], NTradeDir);
      }
      if (hasDAvgPrice) {
        output.WriteDouble(3, field_names[0], DAvgPrice);
      }
      if (hasNPosition) {
        output.WriteInt32(4, field_names[3], NPosition);
      }
      if (hasNYesterdayPosition) {
        output.WriteInt32(5, field_names[6], NYesterdayPosition);
      }
      if (hasNTodayPosition) {
        output.WriteInt32(6, field_names[4], NTodayPosition);
      }
      if (hasDMargin) {
        output.WriteDouble(7, field_names[1], DMargin);
      }
      if (hasDPositionProfit) {
        output.WriteDouble(8, field_names[2], DPositionProfit);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSzINSTRUMENT) {
        size += pb::CodedOutputStream.ComputeStringSize(1, SzINSTRUMENT);
      }
      if (hasNTradeDir) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, NTradeDir);
      }
      if (hasDAvgPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, DAvgPrice);
      }
      if (hasNPosition) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, NPosition);
      }
      if (hasNYesterdayPosition) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, NYesterdayPosition);
      }
      if (hasNTodayPosition) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, NTodayPosition);
      }
      if (hasDMargin) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, DMargin);
      }
      if (hasDPositionProfit) {
        size += pb::CodedOutputStream.ComputeDoubleSize(8, DPositionProfit);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Position ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Position ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Position MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Position prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Position cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Position result;
      
      private Position PrepareBuilder() {
        if (resultIsReadOnly) {
          Position original = result;
          result = new Position();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Position MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.Position.Descriptor; }
      }
      
      public override Position DefaultInstanceForType {
        get { return global::Trade.Position.DefaultInstance; }
      }
      
      public override Position BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Position) {
          return MergeFrom((Position) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Position other) {
        if (other == global::Trade.Position.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSzINSTRUMENT) {
          SzINSTRUMENT = other.SzINSTRUMENT;
        }
        if (other.HasNTradeDir) {
          NTradeDir = other.NTradeDir;
        }
        if (other.HasDAvgPrice) {
          DAvgPrice = other.DAvgPrice;
        }
        if (other.HasNPosition) {
          NPosition = other.NPosition;
        }
        if (other.HasNYesterdayPosition) {
          NYesterdayPosition = other.NYesterdayPosition;
        }
        if (other.HasNTodayPosition) {
          NTodayPosition = other.NTodayPosition;
        }
        if (other.HasDMargin) {
          DMargin = other.DMargin;
        }
        if (other.HasDPositionProfit) {
          DPositionProfit = other.DPositionProfit;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _positionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSzINSTRUMENT = input.ReadString(ref result.szINSTRUMENT_);
              break;
            }
            case 16: {
              result.hasNTradeDir = input.ReadInt32(ref result.nTradeDir_);
              break;
            }
            case 25: {
              result.hasDAvgPrice = input.ReadDouble(ref result.dAvgPrice_);
              break;
            }
            case 32: {
              result.hasNPosition = input.ReadInt32(ref result.nPosition_);
              break;
            }
            case 40: {
              result.hasNYesterdayPosition = input.ReadInt32(ref result.nYesterdayPosition_);
              break;
            }
            case 48: {
              result.hasNTodayPosition = input.ReadInt32(ref result.nTodayPosition_);
              break;
            }
            case 57: {
              result.hasDMargin = input.ReadDouble(ref result.dMargin_);
              break;
            }
            case 65: {
              result.hasDPositionProfit = input.ReadDouble(ref result.dPositionProfit_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSzINSTRUMENT {
        get { return result.hasSzINSTRUMENT; }
      }
      public string SzINSTRUMENT {
        get { return result.SzINSTRUMENT; }
        set { SetSzINSTRUMENT(value); }
      }
      public Builder SetSzINSTRUMENT(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzINSTRUMENT = true;
        result.szINSTRUMENT_ = value;
        return this;
      }
      public Builder ClearSzINSTRUMENT() {
        PrepareBuilder();
        result.hasSzINSTRUMENT = false;
        result.szINSTRUMENT_ = "";
        return this;
      }
      
      public bool HasNTradeDir {
        get { return result.hasNTradeDir; }
      }
      public int NTradeDir {
        get { return result.NTradeDir; }
        set { SetNTradeDir(value); }
      }
      public Builder SetNTradeDir(int value) {
        PrepareBuilder();
        result.hasNTradeDir = true;
        result.nTradeDir_ = value;
        return this;
      }
      public Builder ClearNTradeDir() {
        PrepareBuilder();
        result.hasNTradeDir = false;
        result.nTradeDir_ = 0;
        return this;
      }
      
      public bool HasDAvgPrice {
        get { return result.hasDAvgPrice; }
      }
      public double DAvgPrice {
        get { return result.DAvgPrice; }
        set { SetDAvgPrice(value); }
      }
      public Builder SetDAvgPrice(double value) {
        PrepareBuilder();
        result.hasDAvgPrice = true;
        result.dAvgPrice_ = value;
        return this;
      }
      public Builder ClearDAvgPrice() {
        PrepareBuilder();
        result.hasDAvgPrice = false;
        result.dAvgPrice_ = 0D;
        return this;
      }
      
      public bool HasNPosition {
        get { return result.hasNPosition; }
      }
      public int NPosition {
        get { return result.NPosition; }
        set { SetNPosition(value); }
      }
      public Builder SetNPosition(int value) {
        PrepareBuilder();
        result.hasNPosition = true;
        result.nPosition_ = value;
        return this;
      }
      public Builder ClearNPosition() {
        PrepareBuilder();
        result.hasNPosition = false;
        result.nPosition_ = 0;
        return this;
      }
      
      public bool HasNYesterdayPosition {
        get { return result.hasNYesterdayPosition; }
      }
      public int NYesterdayPosition {
        get { return result.NYesterdayPosition; }
        set { SetNYesterdayPosition(value); }
      }
      public Builder SetNYesterdayPosition(int value) {
        PrepareBuilder();
        result.hasNYesterdayPosition = true;
        result.nYesterdayPosition_ = value;
        return this;
      }
      public Builder ClearNYesterdayPosition() {
        PrepareBuilder();
        result.hasNYesterdayPosition = false;
        result.nYesterdayPosition_ = 0;
        return this;
      }
      
      public bool HasNTodayPosition {
        get { return result.hasNTodayPosition; }
      }
      public int NTodayPosition {
        get { return result.NTodayPosition; }
        set { SetNTodayPosition(value); }
      }
      public Builder SetNTodayPosition(int value) {
        PrepareBuilder();
        result.hasNTodayPosition = true;
        result.nTodayPosition_ = value;
        return this;
      }
      public Builder ClearNTodayPosition() {
        PrepareBuilder();
        result.hasNTodayPosition = false;
        result.nTodayPosition_ = 0;
        return this;
      }
      
      public bool HasDMargin {
        get { return result.hasDMargin; }
      }
      public double DMargin {
        get { return result.DMargin; }
        set { SetDMargin(value); }
      }
      public Builder SetDMargin(double value) {
        PrepareBuilder();
        result.hasDMargin = true;
        result.dMargin_ = value;
        return this;
      }
      public Builder ClearDMargin() {
        PrepareBuilder();
        result.hasDMargin = false;
        result.dMargin_ = 0D;
        return this;
      }
      
      public bool HasDPositionProfit {
        get { return result.hasDPositionProfit; }
      }
      public double DPositionProfit {
        get { return result.DPositionProfit; }
        set { SetDPositionProfit(value); }
      }
      public Builder SetDPositionProfit(double value) {
        PrepareBuilder();
        result.hasDPositionProfit = true;
        result.dPositionProfit_ = value;
        return this;
      }
      public Builder ClearDPositionProfit() {
        PrepareBuilder();
        result.hasDPositionProfit = false;
        result.dPositionProfit_ = 0D;
        return this;
      }
    }
    static Position() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Order : pb::GeneratedMessage<Order, Order.Builder> {
    private Order() { }
    private static readonly Order defaultInstance = new Order().MakeReadOnly();
    private static readonly string[] _orderFieldNames = new string[] { "dAvgPrice", "dLimitPrice", "nOrderID", "nOrderStatus", "nOrderSysID", "nRequestID", "nSessionID", "nTimestampCreate", "nTimestampUpdate", "nTradeDir", "nTradeOperate", "nTradeType", "nTradeVolume", "nTradeVolumeLeft", "nVolume", "szExchangeID", "szINSTRUMENT", "szInsertDateTime", "szOrderRefCustom", "szTradeDateTime" };
    private static readonly uint[] _orderFieldTags = new uint[] { 89, 81, 16, 72, 24, 144, 8, 152, 160, 56, 64, 48, 104, 112, 96, 42, 34, 122, 138, 130 };
    public static Order DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Order DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Order ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_Order__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Order, Order.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_Order__FieldAccessorTable; }
    }
    
    public const int NSessionIDFieldNumber = 1;
    private bool hasNSessionID;
    private int nSessionID_;
    public bool HasNSessionID {
      get { return hasNSessionID; }
    }
    public int NSessionID {
      get { return nSessionID_; }
    }
    
    public const int NOrderIDFieldNumber = 2;
    private bool hasNOrderID;
    private int nOrderID_;
    public bool HasNOrderID {
      get { return hasNOrderID; }
    }
    public int NOrderID {
      get { return nOrderID_; }
    }
    
    public const int NOrderSysIDFieldNumber = 3;
    private bool hasNOrderSysID;
    private int nOrderSysID_;
    public bool HasNOrderSysID {
      get { return hasNOrderSysID; }
    }
    public int NOrderSysID {
      get { return nOrderSysID_; }
    }
    
    public const int SzINSTRUMENTFieldNumber = 4;
    private bool hasSzINSTRUMENT;
    private string szINSTRUMENT_ = "";
    public bool HasSzINSTRUMENT {
      get { return hasSzINSTRUMENT; }
    }
    public string SzINSTRUMENT {
      get { return szINSTRUMENT_; }
    }
    
    public const int SzExchangeIDFieldNumber = 5;
    private bool hasSzExchangeID;
    private string szExchangeID_ = "";
    public bool HasSzExchangeID {
      get { return hasSzExchangeID; }
    }
    public string SzExchangeID {
      get { return szExchangeID_; }
    }
    
    public const int NTradeTypeFieldNumber = 6;
    private bool hasNTradeType;
    private int nTradeType_;
    public bool HasNTradeType {
      get { return hasNTradeType; }
    }
    public int NTradeType {
      get { return nTradeType_; }
    }
    
    public const int NTradeDirFieldNumber = 7;
    private bool hasNTradeDir;
    private int nTradeDir_;
    public bool HasNTradeDir {
      get { return hasNTradeDir; }
    }
    public int NTradeDir {
      get { return nTradeDir_; }
    }
    
    public const int NTradeOperateFieldNumber = 8;
    private bool hasNTradeOperate;
    private int nTradeOperate_;
    public bool HasNTradeOperate {
      get { return hasNTradeOperate; }
    }
    public int NTradeOperate {
      get { return nTradeOperate_; }
    }
    
    public const int NOrderStatusFieldNumber = 9;
    private bool hasNOrderStatus;
    private int nOrderStatus_;
    public bool HasNOrderStatus {
      get { return hasNOrderStatus; }
    }
    public int NOrderStatus {
      get { return nOrderStatus_; }
    }
    
    public const int DLimitPriceFieldNumber = 10;
    private bool hasDLimitPrice;
    private double dLimitPrice_;
    public bool HasDLimitPrice {
      get { return hasDLimitPrice; }
    }
    public double DLimitPrice {
      get { return dLimitPrice_; }
    }
    
    public const int DAvgPriceFieldNumber = 11;
    private bool hasDAvgPrice;
    private double dAvgPrice_;
    public bool HasDAvgPrice {
      get { return hasDAvgPrice; }
    }
    public double DAvgPrice {
      get { return dAvgPrice_; }
    }
    
    public const int NVolumeFieldNumber = 12;
    private bool hasNVolume;
    private int nVolume_;
    public bool HasNVolume {
      get { return hasNVolume; }
    }
    public int NVolume {
      get { return nVolume_; }
    }
    
    public const int NTradeVolumeFieldNumber = 13;
    private bool hasNTradeVolume;
    private int nTradeVolume_;
    public bool HasNTradeVolume {
      get { return hasNTradeVolume; }
    }
    public int NTradeVolume {
      get { return nTradeVolume_; }
    }
    
    public const int NTradeVolumeLeftFieldNumber = 14;
    private bool hasNTradeVolumeLeft;
    private int nTradeVolumeLeft_;
    public bool HasNTradeVolumeLeft {
      get { return hasNTradeVolumeLeft; }
    }
    public int NTradeVolumeLeft {
      get { return nTradeVolumeLeft_; }
    }
    
    public const int SzInsertDateTimeFieldNumber = 15;
    private bool hasSzInsertDateTime;
    private string szInsertDateTime_ = "";
    public bool HasSzInsertDateTime {
      get { return hasSzInsertDateTime; }
    }
    public string SzInsertDateTime {
      get { return szInsertDateTime_; }
    }
    
    public const int SzTradeDateTimeFieldNumber = 16;
    private bool hasSzTradeDateTime;
    private string szTradeDateTime_ = "";
    public bool HasSzTradeDateTime {
      get { return hasSzTradeDateTime; }
    }
    public string SzTradeDateTime {
      get { return szTradeDateTime_; }
    }
    
    public const int SzOrderRefCustomFieldNumber = 17;
    private bool hasSzOrderRefCustom;
    private string szOrderRefCustom_ = "";
    public bool HasSzOrderRefCustom {
      get { return hasSzOrderRefCustom; }
    }
    public string SzOrderRefCustom {
      get { return szOrderRefCustom_; }
    }
    
    public const int NRequestIDFieldNumber = 18;
    private bool hasNRequestID;
    private int nRequestID_;
    public bool HasNRequestID {
      get { return hasNRequestID; }
    }
    public int NRequestID {
      get { return nRequestID_; }
    }
    
    public const int NTimestampCreateFieldNumber = 19;
    private bool hasNTimestampCreate;
    private int nTimestampCreate_;
    public bool HasNTimestampCreate {
      get { return hasNTimestampCreate; }
    }
    public int NTimestampCreate {
      get { return nTimestampCreate_; }
    }
    
    public const int NTimestampUpdateFieldNumber = 20;
    private bool hasNTimestampUpdate;
    private int nTimestampUpdate_;
    public bool HasNTimestampUpdate {
      get { return hasNTimestampUpdate; }
    }
    public int NTimestampUpdate {
      get { return nTimestampUpdate_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _orderFieldNames;
      if (hasNSessionID) {
        output.WriteInt32(1, field_names[6], NSessionID);
      }
      if (hasNOrderID) {
        output.WriteInt32(2, field_names[2], NOrderID);
      }
      if (hasNOrderSysID) {
        output.WriteInt32(3, field_names[4], NOrderSysID);
      }
      if (hasSzINSTRUMENT) {
        output.WriteString(4, field_names[16], SzINSTRUMENT);
      }
      if (hasSzExchangeID) {
        output.WriteString(5, field_names[15], SzExchangeID);
      }
      if (hasNTradeType) {
        output.WriteInt32(6, field_names[11], NTradeType);
      }
      if (hasNTradeDir) {
        output.WriteInt32(7, field_names[9], NTradeDir);
      }
      if (hasNTradeOperate) {
        output.WriteInt32(8, field_names[10], NTradeOperate);
      }
      if (hasNOrderStatus) {
        output.WriteInt32(9, field_names[3], NOrderStatus);
      }
      if (hasDLimitPrice) {
        output.WriteDouble(10, field_names[1], DLimitPrice);
      }
      if (hasDAvgPrice) {
        output.WriteDouble(11, field_names[0], DAvgPrice);
      }
      if (hasNVolume) {
        output.WriteInt32(12, field_names[14], NVolume);
      }
      if (hasNTradeVolume) {
        output.WriteInt32(13, field_names[12], NTradeVolume);
      }
      if (hasNTradeVolumeLeft) {
        output.WriteInt32(14, field_names[13], NTradeVolumeLeft);
      }
      if (hasSzInsertDateTime) {
        output.WriteString(15, field_names[17], SzInsertDateTime);
      }
      if (hasSzTradeDateTime) {
        output.WriteString(16, field_names[19], SzTradeDateTime);
      }
      if (hasSzOrderRefCustom) {
        output.WriteString(17, field_names[18], SzOrderRefCustom);
      }
      if (hasNRequestID) {
        output.WriteInt32(18, field_names[5], NRequestID);
      }
      if (hasNTimestampCreate) {
        output.WriteInt32(19, field_names[7], NTimestampCreate);
      }
      if (hasNTimestampUpdate) {
        output.WriteInt32(20, field_names[8], NTimestampUpdate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNSessionID) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, NSessionID);
      }
      if (hasNOrderID) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, NOrderID);
      }
      if (hasNOrderSysID) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, NOrderSysID);
      }
      if (hasSzINSTRUMENT) {
        size += pb::CodedOutputStream.ComputeStringSize(4, SzINSTRUMENT);
      }
      if (hasSzExchangeID) {
        size += pb::CodedOutputStream.ComputeStringSize(5, SzExchangeID);
      }
      if (hasNTradeType) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, NTradeType);
      }
      if (hasNTradeDir) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, NTradeDir);
      }
      if (hasNTradeOperate) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, NTradeOperate);
      }
      if (hasNOrderStatus) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, NOrderStatus);
      }
      if (hasDLimitPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(10, DLimitPrice);
      }
      if (hasDAvgPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(11, DAvgPrice);
      }
      if (hasNVolume) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, NVolume);
      }
      if (hasNTradeVolume) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, NTradeVolume);
      }
      if (hasNTradeVolumeLeft) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, NTradeVolumeLeft);
      }
      if (hasSzInsertDateTime) {
        size += pb::CodedOutputStream.ComputeStringSize(15, SzInsertDateTime);
      }
      if (hasSzTradeDateTime) {
        size += pb::CodedOutputStream.ComputeStringSize(16, SzTradeDateTime);
      }
      if (hasSzOrderRefCustom) {
        size += pb::CodedOutputStream.ComputeStringSize(17, SzOrderRefCustom);
      }
      if (hasNRequestID) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, NRequestID);
      }
      if (hasNTimestampCreate) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, NTimestampCreate);
      }
      if (hasNTimestampUpdate) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, NTimestampUpdate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Order ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Order ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Order ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Order ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Order ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Order ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Order ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Order ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Order ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Order ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Order MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Order prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Order, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Order cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Order result;
      
      private Order PrepareBuilder() {
        if (resultIsReadOnly) {
          Order original = result;
          result = new Order();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Order MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.Order.Descriptor; }
      }
      
      public override Order DefaultInstanceForType {
        get { return global::Trade.Order.DefaultInstance; }
      }
      
      public override Order BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Order) {
          return MergeFrom((Order) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Order other) {
        if (other == global::Trade.Order.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNSessionID) {
          NSessionID = other.NSessionID;
        }
        if (other.HasNOrderID) {
          NOrderID = other.NOrderID;
        }
        if (other.HasNOrderSysID) {
          NOrderSysID = other.NOrderSysID;
        }
        if (other.HasSzINSTRUMENT) {
          SzINSTRUMENT = other.SzINSTRUMENT;
        }
        if (other.HasSzExchangeID) {
          SzExchangeID = other.SzExchangeID;
        }
        if (other.HasNTradeType) {
          NTradeType = other.NTradeType;
        }
        if (other.HasNTradeDir) {
          NTradeDir = other.NTradeDir;
        }
        if (other.HasNTradeOperate) {
          NTradeOperate = other.NTradeOperate;
        }
        if (other.HasNOrderStatus) {
          NOrderStatus = other.NOrderStatus;
        }
        if (other.HasDLimitPrice) {
          DLimitPrice = other.DLimitPrice;
        }
        if (other.HasDAvgPrice) {
          DAvgPrice = other.DAvgPrice;
        }
        if (other.HasNVolume) {
          NVolume = other.NVolume;
        }
        if (other.HasNTradeVolume) {
          NTradeVolume = other.NTradeVolume;
        }
        if (other.HasNTradeVolumeLeft) {
          NTradeVolumeLeft = other.NTradeVolumeLeft;
        }
        if (other.HasSzInsertDateTime) {
          SzInsertDateTime = other.SzInsertDateTime;
        }
        if (other.HasSzTradeDateTime) {
          SzTradeDateTime = other.SzTradeDateTime;
        }
        if (other.HasSzOrderRefCustom) {
          SzOrderRefCustom = other.SzOrderRefCustom;
        }
        if (other.HasNRequestID) {
          NRequestID = other.NRequestID;
        }
        if (other.HasNTimestampCreate) {
          NTimestampCreate = other.NTimestampCreate;
        }
        if (other.HasNTimestampUpdate) {
          NTimestampUpdate = other.NTimestampUpdate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_orderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _orderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNSessionID = input.ReadInt32(ref result.nSessionID_);
              break;
            }
            case 16: {
              result.hasNOrderID = input.ReadInt32(ref result.nOrderID_);
              break;
            }
            case 24: {
              result.hasNOrderSysID = input.ReadInt32(ref result.nOrderSysID_);
              break;
            }
            case 34: {
              result.hasSzINSTRUMENT = input.ReadString(ref result.szINSTRUMENT_);
              break;
            }
            case 42: {
              result.hasSzExchangeID = input.ReadString(ref result.szExchangeID_);
              break;
            }
            case 48: {
              result.hasNTradeType = input.ReadInt32(ref result.nTradeType_);
              break;
            }
            case 56: {
              result.hasNTradeDir = input.ReadInt32(ref result.nTradeDir_);
              break;
            }
            case 64: {
              result.hasNTradeOperate = input.ReadInt32(ref result.nTradeOperate_);
              break;
            }
            case 72: {
              result.hasNOrderStatus = input.ReadInt32(ref result.nOrderStatus_);
              break;
            }
            case 81: {
              result.hasDLimitPrice = input.ReadDouble(ref result.dLimitPrice_);
              break;
            }
            case 89: {
              result.hasDAvgPrice = input.ReadDouble(ref result.dAvgPrice_);
              break;
            }
            case 96: {
              result.hasNVolume = input.ReadInt32(ref result.nVolume_);
              break;
            }
            case 104: {
              result.hasNTradeVolume = input.ReadInt32(ref result.nTradeVolume_);
              break;
            }
            case 112: {
              result.hasNTradeVolumeLeft = input.ReadInt32(ref result.nTradeVolumeLeft_);
              break;
            }
            case 122: {
              result.hasSzInsertDateTime = input.ReadString(ref result.szInsertDateTime_);
              break;
            }
            case 130: {
              result.hasSzTradeDateTime = input.ReadString(ref result.szTradeDateTime_);
              break;
            }
            case 138: {
              result.hasSzOrderRefCustom = input.ReadString(ref result.szOrderRefCustom_);
              break;
            }
            case 144: {
              result.hasNRequestID = input.ReadInt32(ref result.nRequestID_);
              break;
            }
            case 152: {
              result.hasNTimestampCreate = input.ReadInt32(ref result.nTimestampCreate_);
              break;
            }
            case 160: {
              result.hasNTimestampUpdate = input.ReadInt32(ref result.nTimestampUpdate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNSessionID {
        get { return result.hasNSessionID; }
      }
      public int NSessionID {
        get { return result.NSessionID; }
        set { SetNSessionID(value); }
      }
      public Builder SetNSessionID(int value) {
        PrepareBuilder();
        result.hasNSessionID = true;
        result.nSessionID_ = value;
        return this;
      }
      public Builder ClearNSessionID() {
        PrepareBuilder();
        result.hasNSessionID = false;
        result.nSessionID_ = 0;
        return this;
      }
      
      public bool HasNOrderID {
        get { return result.hasNOrderID; }
      }
      public int NOrderID {
        get { return result.NOrderID; }
        set { SetNOrderID(value); }
      }
      public Builder SetNOrderID(int value) {
        PrepareBuilder();
        result.hasNOrderID = true;
        result.nOrderID_ = value;
        return this;
      }
      public Builder ClearNOrderID() {
        PrepareBuilder();
        result.hasNOrderID = false;
        result.nOrderID_ = 0;
        return this;
      }
      
      public bool HasNOrderSysID {
        get { return result.hasNOrderSysID; }
      }
      public int NOrderSysID {
        get { return result.NOrderSysID; }
        set { SetNOrderSysID(value); }
      }
      public Builder SetNOrderSysID(int value) {
        PrepareBuilder();
        result.hasNOrderSysID = true;
        result.nOrderSysID_ = value;
        return this;
      }
      public Builder ClearNOrderSysID() {
        PrepareBuilder();
        result.hasNOrderSysID = false;
        result.nOrderSysID_ = 0;
        return this;
      }
      
      public bool HasSzINSTRUMENT {
        get { return result.hasSzINSTRUMENT; }
      }
      public string SzINSTRUMENT {
        get { return result.SzINSTRUMENT; }
        set { SetSzINSTRUMENT(value); }
      }
      public Builder SetSzINSTRUMENT(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzINSTRUMENT = true;
        result.szINSTRUMENT_ = value;
        return this;
      }
      public Builder ClearSzINSTRUMENT() {
        PrepareBuilder();
        result.hasSzINSTRUMENT = false;
        result.szINSTRUMENT_ = "";
        return this;
      }
      
      public bool HasSzExchangeID {
        get { return result.hasSzExchangeID; }
      }
      public string SzExchangeID {
        get { return result.SzExchangeID; }
        set { SetSzExchangeID(value); }
      }
      public Builder SetSzExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzExchangeID = true;
        result.szExchangeID_ = value;
        return this;
      }
      public Builder ClearSzExchangeID() {
        PrepareBuilder();
        result.hasSzExchangeID = false;
        result.szExchangeID_ = "";
        return this;
      }
      
      public bool HasNTradeType {
        get { return result.hasNTradeType; }
      }
      public int NTradeType {
        get { return result.NTradeType; }
        set { SetNTradeType(value); }
      }
      public Builder SetNTradeType(int value) {
        PrepareBuilder();
        result.hasNTradeType = true;
        result.nTradeType_ = value;
        return this;
      }
      public Builder ClearNTradeType() {
        PrepareBuilder();
        result.hasNTradeType = false;
        result.nTradeType_ = 0;
        return this;
      }
      
      public bool HasNTradeDir {
        get { return result.hasNTradeDir; }
      }
      public int NTradeDir {
        get { return result.NTradeDir; }
        set { SetNTradeDir(value); }
      }
      public Builder SetNTradeDir(int value) {
        PrepareBuilder();
        result.hasNTradeDir = true;
        result.nTradeDir_ = value;
        return this;
      }
      public Builder ClearNTradeDir() {
        PrepareBuilder();
        result.hasNTradeDir = false;
        result.nTradeDir_ = 0;
        return this;
      }
      
      public bool HasNTradeOperate {
        get { return result.hasNTradeOperate; }
      }
      public int NTradeOperate {
        get { return result.NTradeOperate; }
        set { SetNTradeOperate(value); }
      }
      public Builder SetNTradeOperate(int value) {
        PrepareBuilder();
        result.hasNTradeOperate = true;
        result.nTradeOperate_ = value;
        return this;
      }
      public Builder ClearNTradeOperate() {
        PrepareBuilder();
        result.hasNTradeOperate = false;
        result.nTradeOperate_ = 0;
        return this;
      }
      
      public bool HasNOrderStatus {
        get { return result.hasNOrderStatus; }
      }
      public int NOrderStatus {
        get { return result.NOrderStatus; }
        set { SetNOrderStatus(value); }
      }
      public Builder SetNOrderStatus(int value) {
        PrepareBuilder();
        result.hasNOrderStatus = true;
        result.nOrderStatus_ = value;
        return this;
      }
      public Builder ClearNOrderStatus() {
        PrepareBuilder();
        result.hasNOrderStatus = false;
        result.nOrderStatus_ = 0;
        return this;
      }
      
      public bool HasDLimitPrice {
        get { return result.hasDLimitPrice; }
      }
      public double DLimitPrice {
        get { return result.DLimitPrice; }
        set { SetDLimitPrice(value); }
      }
      public Builder SetDLimitPrice(double value) {
        PrepareBuilder();
        result.hasDLimitPrice = true;
        result.dLimitPrice_ = value;
        return this;
      }
      public Builder ClearDLimitPrice() {
        PrepareBuilder();
        result.hasDLimitPrice = false;
        result.dLimitPrice_ = 0D;
        return this;
      }
      
      public bool HasDAvgPrice {
        get { return result.hasDAvgPrice; }
      }
      public double DAvgPrice {
        get { return result.DAvgPrice; }
        set { SetDAvgPrice(value); }
      }
      public Builder SetDAvgPrice(double value) {
        PrepareBuilder();
        result.hasDAvgPrice = true;
        result.dAvgPrice_ = value;
        return this;
      }
      public Builder ClearDAvgPrice() {
        PrepareBuilder();
        result.hasDAvgPrice = false;
        result.dAvgPrice_ = 0D;
        return this;
      }
      
      public bool HasNVolume {
        get { return result.hasNVolume; }
      }
      public int NVolume {
        get { return result.NVolume; }
        set { SetNVolume(value); }
      }
      public Builder SetNVolume(int value) {
        PrepareBuilder();
        result.hasNVolume = true;
        result.nVolume_ = value;
        return this;
      }
      public Builder ClearNVolume() {
        PrepareBuilder();
        result.hasNVolume = false;
        result.nVolume_ = 0;
        return this;
      }
      
      public bool HasNTradeVolume {
        get { return result.hasNTradeVolume; }
      }
      public int NTradeVolume {
        get { return result.NTradeVolume; }
        set { SetNTradeVolume(value); }
      }
      public Builder SetNTradeVolume(int value) {
        PrepareBuilder();
        result.hasNTradeVolume = true;
        result.nTradeVolume_ = value;
        return this;
      }
      public Builder ClearNTradeVolume() {
        PrepareBuilder();
        result.hasNTradeVolume = false;
        result.nTradeVolume_ = 0;
        return this;
      }
      
      public bool HasNTradeVolumeLeft {
        get { return result.hasNTradeVolumeLeft; }
      }
      public int NTradeVolumeLeft {
        get { return result.NTradeVolumeLeft; }
        set { SetNTradeVolumeLeft(value); }
      }
      public Builder SetNTradeVolumeLeft(int value) {
        PrepareBuilder();
        result.hasNTradeVolumeLeft = true;
        result.nTradeVolumeLeft_ = value;
        return this;
      }
      public Builder ClearNTradeVolumeLeft() {
        PrepareBuilder();
        result.hasNTradeVolumeLeft = false;
        result.nTradeVolumeLeft_ = 0;
        return this;
      }
      
      public bool HasSzInsertDateTime {
        get { return result.hasSzInsertDateTime; }
      }
      public string SzInsertDateTime {
        get { return result.SzInsertDateTime; }
        set { SetSzInsertDateTime(value); }
      }
      public Builder SetSzInsertDateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzInsertDateTime = true;
        result.szInsertDateTime_ = value;
        return this;
      }
      public Builder ClearSzInsertDateTime() {
        PrepareBuilder();
        result.hasSzInsertDateTime = false;
        result.szInsertDateTime_ = "";
        return this;
      }
      
      public bool HasSzTradeDateTime {
        get { return result.hasSzTradeDateTime; }
      }
      public string SzTradeDateTime {
        get { return result.SzTradeDateTime; }
        set { SetSzTradeDateTime(value); }
      }
      public Builder SetSzTradeDateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzTradeDateTime = true;
        result.szTradeDateTime_ = value;
        return this;
      }
      public Builder ClearSzTradeDateTime() {
        PrepareBuilder();
        result.hasSzTradeDateTime = false;
        result.szTradeDateTime_ = "";
        return this;
      }
      
      public bool HasSzOrderRefCustom {
        get { return result.hasSzOrderRefCustom; }
      }
      public string SzOrderRefCustom {
        get { return result.SzOrderRefCustom; }
        set { SetSzOrderRefCustom(value); }
      }
      public Builder SetSzOrderRefCustom(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzOrderRefCustom = true;
        result.szOrderRefCustom_ = value;
        return this;
      }
      public Builder ClearSzOrderRefCustom() {
        PrepareBuilder();
        result.hasSzOrderRefCustom = false;
        result.szOrderRefCustom_ = "";
        return this;
      }
      
      public bool HasNRequestID {
        get { return result.hasNRequestID; }
      }
      public int NRequestID {
        get { return result.NRequestID; }
        set { SetNRequestID(value); }
      }
      public Builder SetNRequestID(int value) {
        PrepareBuilder();
        result.hasNRequestID = true;
        result.nRequestID_ = value;
        return this;
      }
      public Builder ClearNRequestID() {
        PrepareBuilder();
        result.hasNRequestID = false;
        result.nRequestID_ = 0;
        return this;
      }
      
      public bool HasNTimestampCreate {
        get { return result.hasNTimestampCreate; }
      }
      public int NTimestampCreate {
        get { return result.NTimestampCreate; }
        set { SetNTimestampCreate(value); }
      }
      public Builder SetNTimestampCreate(int value) {
        PrepareBuilder();
        result.hasNTimestampCreate = true;
        result.nTimestampCreate_ = value;
        return this;
      }
      public Builder ClearNTimestampCreate() {
        PrepareBuilder();
        result.hasNTimestampCreate = false;
        result.nTimestampCreate_ = 0;
        return this;
      }
      
      public bool HasNTimestampUpdate {
        get { return result.hasNTimestampUpdate; }
      }
      public int NTimestampUpdate {
        get { return result.NTimestampUpdate; }
        set { SetNTimestampUpdate(value); }
      }
      public Builder SetNTimestampUpdate(int value) {
        PrepareBuilder();
        result.hasNTimestampUpdate = true;
        result.nTimestampUpdate_ = value;
        return this;
      }
      public Builder ClearNTimestampUpdate() {
        PrepareBuilder();
        result.hasNTimestampUpdate = false;
        result.nTimestampUpdate_ = 0;
        return this;
      }
    }
    static Order() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Trade : pb::GeneratedMessage<Trade, Trade.Builder> {
    private Trade() { }
    private static readonly Trade defaultInstance = new Trade().MakeReadOnly();
    private static readonly string[] _tradeFieldNames = new string[] { "dPrice", "nOrderID", "nRequestID", "nSystemID", "nTradeDir", "nTradeOperate", "nVolume", "szExchangeID", "szINSTRUMENT", "szTradeID", "szTradeTime", "szTradingDay" };
    private static readonly uint[] _tradeFieldTags = new uint[] { 65, 16, 96, 24, 48, 56, 72, 42, 34, 10, 82, 90 };
    public static Trade DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Trade DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Trade ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_Trade__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Trade, Trade.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_Trade__FieldAccessorTable; }
    }
    
    public const int SzTradeIDFieldNumber = 1;
    private bool hasSzTradeID;
    private string szTradeID_ = "";
    public bool HasSzTradeID {
      get { return hasSzTradeID; }
    }
    public string SzTradeID {
      get { return szTradeID_; }
    }
    
    public const int NOrderIDFieldNumber = 2;
    private bool hasNOrderID;
    private int nOrderID_;
    public bool HasNOrderID {
      get { return hasNOrderID; }
    }
    public int NOrderID {
      get { return nOrderID_; }
    }
    
    public const int NSystemIDFieldNumber = 3;
    private bool hasNSystemID;
    private int nSystemID_;
    public bool HasNSystemID {
      get { return hasNSystemID; }
    }
    public int NSystemID {
      get { return nSystemID_; }
    }
    
    public const int SzINSTRUMENTFieldNumber = 4;
    private bool hasSzINSTRUMENT;
    private string szINSTRUMENT_ = "";
    public bool HasSzINSTRUMENT {
      get { return hasSzINSTRUMENT; }
    }
    public string SzINSTRUMENT {
      get { return szINSTRUMENT_; }
    }
    
    public const int SzExchangeIDFieldNumber = 5;
    private bool hasSzExchangeID;
    private string szExchangeID_ = "";
    public bool HasSzExchangeID {
      get { return hasSzExchangeID; }
    }
    public string SzExchangeID {
      get { return szExchangeID_; }
    }
    
    public const int NTradeDirFieldNumber = 6;
    private bool hasNTradeDir;
    private int nTradeDir_;
    public bool HasNTradeDir {
      get { return hasNTradeDir; }
    }
    public int NTradeDir {
      get { return nTradeDir_; }
    }
    
    public const int NTradeOperateFieldNumber = 7;
    private bool hasNTradeOperate;
    private int nTradeOperate_;
    public bool HasNTradeOperate {
      get { return hasNTradeOperate; }
    }
    public int NTradeOperate {
      get { return nTradeOperate_; }
    }
    
    public const int DPriceFieldNumber = 8;
    private bool hasDPrice;
    private double dPrice_;
    public bool HasDPrice {
      get { return hasDPrice; }
    }
    public double DPrice {
      get { return dPrice_; }
    }
    
    public const int NVolumeFieldNumber = 9;
    private bool hasNVolume;
    private int nVolume_;
    public bool HasNVolume {
      get { return hasNVolume; }
    }
    public int NVolume {
      get { return nVolume_; }
    }
    
    public const int SzTradeTimeFieldNumber = 10;
    private bool hasSzTradeTime;
    private string szTradeTime_ = "";
    public bool HasSzTradeTime {
      get { return hasSzTradeTime; }
    }
    public string SzTradeTime {
      get { return szTradeTime_; }
    }
    
    public const int SzTradingDayFieldNumber = 11;
    private bool hasSzTradingDay;
    private string szTradingDay_ = "";
    public bool HasSzTradingDay {
      get { return hasSzTradingDay; }
    }
    public string SzTradingDay {
      get { return szTradingDay_; }
    }
    
    public const int NRequestIDFieldNumber = 12;
    private bool hasNRequestID;
    private int nRequestID_;
    public bool HasNRequestID {
      get { return hasNRequestID; }
    }
    public int NRequestID {
      get { return nRequestID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tradeFieldNames;
      if (hasSzTradeID) {
        output.WriteString(1, field_names[9], SzTradeID);
      }
      if (hasNOrderID) {
        output.WriteInt32(2, field_names[1], NOrderID);
      }
      if (hasNSystemID) {
        output.WriteInt32(3, field_names[3], NSystemID);
      }
      if (hasSzINSTRUMENT) {
        output.WriteString(4, field_names[8], SzINSTRUMENT);
      }
      if (hasSzExchangeID) {
        output.WriteString(5, field_names[7], SzExchangeID);
      }
      if (hasNTradeDir) {
        output.WriteInt32(6, field_names[4], NTradeDir);
      }
      if (hasNTradeOperate) {
        output.WriteInt32(7, field_names[5], NTradeOperate);
      }
      if (hasDPrice) {
        output.WriteDouble(8, field_names[0], DPrice);
      }
      if (hasNVolume) {
        output.WriteInt32(9, field_names[6], NVolume);
      }
      if (hasSzTradeTime) {
        output.WriteString(10, field_names[10], SzTradeTime);
      }
      if (hasSzTradingDay) {
        output.WriteString(11, field_names[11], SzTradingDay);
      }
      if (hasNRequestID) {
        output.WriteInt32(12, field_names[2], NRequestID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSzTradeID) {
        size += pb::CodedOutputStream.ComputeStringSize(1, SzTradeID);
      }
      if (hasNOrderID) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, NOrderID);
      }
      if (hasNSystemID) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, NSystemID);
      }
      if (hasSzINSTRUMENT) {
        size += pb::CodedOutputStream.ComputeStringSize(4, SzINSTRUMENT);
      }
      if (hasSzExchangeID) {
        size += pb::CodedOutputStream.ComputeStringSize(5, SzExchangeID);
      }
      if (hasNTradeDir) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, NTradeDir);
      }
      if (hasNTradeOperate) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, NTradeOperate);
      }
      if (hasDPrice) {
        size += pb::CodedOutputStream.ComputeDoubleSize(8, DPrice);
      }
      if (hasNVolume) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, NVolume);
      }
      if (hasSzTradeTime) {
        size += pb::CodedOutputStream.ComputeStringSize(10, SzTradeTime);
      }
      if (hasSzTradingDay) {
        size += pb::CodedOutputStream.ComputeStringSize(11, SzTradingDay);
      }
      if (hasNRequestID) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, NRequestID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Trade ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Trade ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Trade ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Trade ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Trade ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Trade ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Trade ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Trade ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Trade ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Trade ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Trade MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Trade prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Trade, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Trade cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Trade result;
      
      private Trade PrepareBuilder() {
        if (resultIsReadOnly) {
          Trade original = result;
          result = new Trade();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Trade MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.Trade.Descriptor; }
      }
      
      public override Trade DefaultInstanceForType {
        get { return global::Trade.Trade.DefaultInstance; }
      }
      
      public override Trade BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Trade) {
          return MergeFrom((Trade) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Trade other) {
        if (other == global::Trade.Trade.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSzTradeID) {
          SzTradeID = other.SzTradeID;
        }
        if (other.HasNOrderID) {
          NOrderID = other.NOrderID;
        }
        if (other.HasNSystemID) {
          NSystemID = other.NSystemID;
        }
        if (other.HasSzINSTRUMENT) {
          SzINSTRUMENT = other.SzINSTRUMENT;
        }
        if (other.HasSzExchangeID) {
          SzExchangeID = other.SzExchangeID;
        }
        if (other.HasNTradeDir) {
          NTradeDir = other.NTradeDir;
        }
        if (other.HasNTradeOperate) {
          NTradeOperate = other.NTradeOperate;
        }
        if (other.HasDPrice) {
          DPrice = other.DPrice;
        }
        if (other.HasNVolume) {
          NVolume = other.NVolume;
        }
        if (other.HasSzTradeTime) {
          SzTradeTime = other.SzTradeTime;
        }
        if (other.HasSzTradingDay) {
          SzTradingDay = other.SzTradingDay;
        }
        if (other.HasNRequestID) {
          NRequestID = other.NRequestID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tradeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tradeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSzTradeID = input.ReadString(ref result.szTradeID_);
              break;
            }
            case 16: {
              result.hasNOrderID = input.ReadInt32(ref result.nOrderID_);
              break;
            }
            case 24: {
              result.hasNSystemID = input.ReadInt32(ref result.nSystemID_);
              break;
            }
            case 34: {
              result.hasSzINSTRUMENT = input.ReadString(ref result.szINSTRUMENT_);
              break;
            }
            case 42: {
              result.hasSzExchangeID = input.ReadString(ref result.szExchangeID_);
              break;
            }
            case 48: {
              result.hasNTradeDir = input.ReadInt32(ref result.nTradeDir_);
              break;
            }
            case 56: {
              result.hasNTradeOperate = input.ReadInt32(ref result.nTradeOperate_);
              break;
            }
            case 65: {
              result.hasDPrice = input.ReadDouble(ref result.dPrice_);
              break;
            }
            case 72: {
              result.hasNVolume = input.ReadInt32(ref result.nVolume_);
              break;
            }
            case 82: {
              result.hasSzTradeTime = input.ReadString(ref result.szTradeTime_);
              break;
            }
            case 90: {
              result.hasSzTradingDay = input.ReadString(ref result.szTradingDay_);
              break;
            }
            case 96: {
              result.hasNRequestID = input.ReadInt32(ref result.nRequestID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSzTradeID {
        get { return result.hasSzTradeID; }
      }
      public string SzTradeID {
        get { return result.SzTradeID; }
        set { SetSzTradeID(value); }
      }
      public Builder SetSzTradeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzTradeID = true;
        result.szTradeID_ = value;
        return this;
      }
      public Builder ClearSzTradeID() {
        PrepareBuilder();
        result.hasSzTradeID = false;
        result.szTradeID_ = "";
        return this;
      }
      
      public bool HasNOrderID {
        get { return result.hasNOrderID; }
      }
      public int NOrderID {
        get { return result.NOrderID; }
        set { SetNOrderID(value); }
      }
      public Builder SetNOrderID(int value) {
        PrepareBuilder();
        result.hasNOrderID = true;
        result.nOrderID_ = value;
        return this;
      }
      public Builder ClearNOrderID() {
        PrepareBuilder();
        result.hasNOrderID = false;
        result.nOrderID_ = 0;
        return this;
      }
      
      public bool HasNSystemID {
        get { return result.hasNSystemID; }
      }
      public int NSystemID {
        get { return result.NSystemID; }
        set { SetNSystemID(value); }
      }
      public Builder SetNSystemID(int value) {
        PrepareBuilder();
        result.hasNSystemID = true;
        result.nSystemID_ = value;
        return this;
      }
      public Builder ClearNSystemID() {
        PrepareBuilder();
        result.hasNSystemID = false;
        result.nSystemID_ = 0;
        return this;
      }
      
      public bool HasSzINSTRUMENT {
        get { return result.hasSzINSTRUMENT; }
      }
      public string SzINSTRUMENT {
        get { return result.SzINSTRUMENT; }
        set { SetSzINSTRUMENT(value); }
      }
      public Builder SetSzINSTRUMENT(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzINSTRUMENT = true;
        result.szINSTRUMENT_ = value;
        return this;
      }
      public Builder ClearSzINSTRUMENT() {
        PrepareBuilder();
        result.hasSzINSTRUMENT = false;
        result.szINSTRUMENT_ = "";
        return this;
      }
      
      public bool HasSzExchangeID {
        get { return result.hasSzExchangeID; }
      }
      public string SzExchangeID {
        get { return result.SzExchangeID; }
        set { SetSzExchangeID(value); }
      }
      public Builder SetSzExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzExchangeID = true;
        result.szExchangeID_ = value;
        return this;
      }
      public Builder ClearSzExchangeID() {
        PrepareBuilder();
        result.hasSzExchangeID = false;
        result.szExchangeID_ = "";
        return this;
      }
      
      public bool HasNTradeDir {
        get { return result.hasNTradeDir; }
      }
      public int NTradeDir {
        get { return result.NTradeDir; }
        set { SetNTradeDir(value); }
      }
      public Builder SetNTradeDir(int value) {
        PrepareBuilder();
        result.hasNTradeDir = true;
        result.nTradeDir_ = value;
        return this;
      }
      public Builder ClearNTradeDir() {
        PrepareBuilder();
        result.hasNTradeDir = false;
        result.nTradeDir_ = 0;
        return this;
      }
      
      public bool HasNTradeOperate {
        get { return result.hasNTradeOperate; }
      }
      public int NTradeOperate {
        get { return result.NTradeOperate; }
        set { SetNTradeOperate(value); }
      }
      public Builder SetNTradeOperate(int value) {
        PrepareBuilder();
        result.hasNTradeOperate = true;
        result.nTradeOperate_ = value;
        return this;
      }
      public Builder ClearNTradeOperate() {
        PrepareBuilder();
        result.hasNTradeOperate = false;
        result.nTradeOperate_ = 0;
        return this;
      }
      
      public bool HasDPrice {
        get { return result.hasDPrice; }
      }
      public double DPrice {
        get { return result.DPrice; }
        set { SetDPrice(value); }
      }
      public Builder SetDPrice(double value) {
        PrepareBuilder();
        result.hasDPrice = true;
        result.dPrice_ = value;
        return this;
      }
      public Builder ClearDPrice() {
        PrepareBuilder();
        result.hasDPrice = false;
        result.dPrice_ = 0D;
        return this;
      }
      
      public bool HasNVolume {
        get { return result.hasNVolume; }
      }
      public int NVolume {
        get { return result.NVolume; }
        set { SetNVolume(value); }
      }
      public Builder SetNVolume(int value) {
        PrepareBuilder();
        result.hasNVolume = true;
        result.nVolume_ = value;
        return this;
      }
      public Builder ClearNVolume() {
        PrepareBuilder();
        result.hasNVolume = false;
        result.nVolume_ = 0;
        return this;
      }
      
      public bool HasSzTradeTime {
        get { return result.hasSzTradeTime; }
      }
      public string SzTradeTime {
        get { return result.SzTradeTime; }
        set { SetSzTradeTime(value); }
      }
      public Builder SetSzTradeTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzTradeTime = true;
        result.szTradeTime_ = value;
        return this;
      }
      public Builder ClearSzTradeTime() {
        PrepareBuilder();
        result.hasSzTradeTime = false;
        result.szTradeTime_ = "";
        return this;
      }
      
      public bool HasSzTradingDay {
        get { return result.hasSzTradingDay; }
      }
      public string SzTradingDay {
        get { return result.SzTradingDay; }
        set { SetSzTradingDay(value); }
      }
      public Builder SetSzTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzTradingDay = true;
        result.szTradingDay_ = value;
        return this;
      }
      public Builder ClearSzTradingDay() {
        PrepareBuilder();
        result.hasSzTradingDay = false;
        result.szTradingDay_ = "";
        return this;
      }
      
      public bool HasNRequestID {
        get { return result.hasNRequestID; }
      }
      public int NRequestID {
        get { return result.NRequestID; }
        set { SetNRequestID(value); }
      }
      public Builder SetNRequestID(int value) {
        PrepareBuilder();
        result.hasNRequestID = true;
        result.nRequestID_ = value;
        return this;
      }
      public Builder ClearNRequestID() {
        PrepareBuilder();
        result.hasNRequestID = false;
        result.nRequestID_ = 0;
        return this;
      }
    }
    static Trade() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ErrorInfo : pb::GeneratedMessage<ErrorInfo, ErrorInfo.Builder> {
    private ErrorInfo() { }
    private static readonly ErrorInfo defaultInstance = new ErrorInfo().MakeReadOnly();
    private static readonly string[] _errorInfoFieldNames = new string[] { "nRequestID" };
    private static readonly uint[] _errorInfoFieldTags = new uint[] { 8 };
    public static ErrorInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ErrorInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ErrorInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Trade.Proto.Trade.internal__static_Trade_ErrorInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ErrorInfo, ErrorInfo.Builder> InternalFieldAccessors {
      get { return global::Trade.Proto.Trade.internal__static_Trade_ErrorInfo__FieldAccessorTable; }
    }
    
    public const int NRequestIDFieldNumber = 1;
    private bool hasNRequestID;
    private int nRequestID_;
    public bool HasNRequestID {
      get { return hasNRequestID; }
    }
    public int NRequestID {
      get { return nRequestID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _errorInfoFieldNames;
      if (hasNRequestID) {
        output.WriteInt32(1, field_names[0], NRequestID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNRequestID) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, NRequestID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ErrorInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ErrorInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ErrorInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ErrorInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ErrorInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ErrorInfo result;
      
      private ErrorInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ErrorInfo original = result;
          result = new ErrorInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ErrorInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Trade.ErrorInfo.Descriptor; }
      }
      
      public override ErrorInfo DefaultInstanceForType {
        get { return global::Trade.ErrorInfo.DefaultInstance; }
      }
      
      public override ErrorInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorInfo) {
          return MergeFrom((ErrorInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ErrorInfo other) {
        if (other == global::Trade.ErrorInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNRequestID) {
          NRequestID = other.NRequestID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNRequestID = input.ReadInt32(ref result.nRequestID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNRequestID {
        get { return result.hasNRequestID; }
      }
      public int NRequestID {
        get { return result.NRequestID; }
        set { SetNRequestID(value); }
      }
      public Builder SetNRequestID(int value) {
        PrepareBuilder();
        result.hasNRequestID = true;
        result.nRequestID_ = value;
        return this;
      }
      public Builder ClearNRequestID() {
        PrepareBuilder();
        result.hasNRequestID = false;
        result.nRequestID_ = 0;
        return this;
      }
    }
    static ErrorInfo() {
      object.ReferenceEquals(global::Trade.Proto.Trade.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
