// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace StockServer {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Stockserver {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_StockServer_StockData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.StockData, global::StockServer.StockData.Builder> internal__static_StockServer_StockData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_StockDataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.StockDataRequest, global::StockServer.StockDataRequest.Builder> internal__static_StockServer_StockDataRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_StockDataResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.StockDataResponse, global::StockServer.StockDataResponse.Builder> internal__static_StockServer_StockDataResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_TickData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.TickData, global::StockServer.TickData.Builder> internal__static_StockServer_TickData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_TickDataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.TickDataRequest, global::StockServer.TickDataRequest.Builder> internal__static_StockServer_TickDataRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_TickDataResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.TickDataResponse, global::StockServer.TickDataResponse.Builder> internal__static_StockServer_TickDataResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_StockInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.StockInfo, global::StockServer.StockInfo.Builder> internal__static_StockServer_StockInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_StockInfoRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.StockInfoRequest, global::StockServer.StockInfoRequest.Builder> internal__static_StockServer_StockInfoRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_StockInfoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.StockInfoResponse, global::StockServer.StockInfoResponse.Builder> internal__static_StockServer_StockInfoResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_NewStockDataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.NewStockDataRequest, global::StockServer.NewStockDataRequest.Builder> internal__static_StockServer_NewStockDataRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_NewStockInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.NewStockInfo, global::StockServer.NewStockInfo.Builder> internal__static_StockServer_NewStockInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_NewStockDataResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.NewStockDataResponse, global::StockServer.NewStockDataResponse.Builder> internal__static_StockServer_NewStockDataResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_IpoDataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.IpoDataRequest, global::StockServer.IpoDataRequest.Builder> internal__static_StockServer_IpoDataRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_IpoInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.IpoInfo, global::StockServer.IpoInfo.Builder> internal__static_StockServer_IpoInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StockServer_IpoDataResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StockServer.IpoDataResponse, global::StockServer.IpoDataResponse.Builder> internal__static_StockServer_IpoDataResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Stockserver() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFzdG9ja3NlcnZlci5wcm90bxILU3RvY2tTZXJ2ZXIiiAEKCVN0b2NrRGF0", 
            "YRIQCghkYXRldGltZRgBIAIoCRIMCgRvcGVuGAIgAigCEg0KBWNsb3NlGAMg", 
            "AigCEgsKA2xvdxgEIAIoAhIMCgRoaWdoGAUgAigCEg4KBnZvbHVtZRgGIAIo", 
            "AhIOCgZhbW91bnQYByACKAISEQoJbGFzdGNsb3NlGAggASgCIoEBChBTdG9j", 
            "a0RhdGFSZXF1ZXN0EgwKBGNvZGUYASACKAkSDAoEdHlwZRgCIAIoBRIgCgNw", 
            "ZXIYAyACKA4yEy5TdG9ja1NlcnZlci5QZXJpb2QSDwoEZnJvbRgEIAEoCToB", 
            "MBINCgJ0bxgFIAEoCToBMBIPCgNudW0YBiABKAU6AjIwImkKEVN0b2NrRGF0", 
            "YVJlc3BvbnNlEgwKBGNvZGUYASACKAkSIAoDcGVyGAIgAigOMhMuU3RvY2tT", 
            "ZXJ2ZXIuUGVyaW9kEiQKBGRhdGEYAyADKAsyFi5TdG9ja1NlcnZlci5TdG9j", 
            "a0RhdGEiSwoIVGlja0RhdGESEAoIZGF0ZXRpbWUYASACKAkSDQoFcHJpY2UY", 
            "AiACKAISDgoGdm9sdW1lGAMgAigCEg4KBmFtb3VudBgEIAIoAiIxCg9UaWNr", 
            "RGF0YVJlcXVlc3QSDAoEY29kZRgBIAIoCRIQCghkYXRldGltZRgCIAIoCSJF", 
            "ChBUaWNrRGF0YVJlc3BvbnNlEgwKBGNvZGUYASACKAkSIwoEZGF0YRgCIAMo", 
            "CzIVLlN0b2NrU2VydmVyLlRpY2tEYXRhIl0KCVN0b2NrSW5mbxIMCgRjb2Rl", 
            "GAEgAigJEgwKBG5hbWUYAiACKAkSCwoDcGVyGAMgASgCEgoKAnBiGAQgASgC", 
            "Eg4KBm1rdGNhcBgFIAEoAhILCgNubWMYBiABKAIiIAoQU3RvY2tJbmZvUmVx", 
            "dWVzdBIMCgR0eXBlGAEgAigFIjkKEVN0b2NrSW5mb1Jlc3BvbnNlEiQKBGRh", 
            "dGEYASADKAsyFi5TdG9ja1NlcnZlci5TdG9ja0luZm8iJAoTTmV3U3RvY2tE", 
            "YXRhUmVxdWVzdBINCgVkdW1teRgBIAEoCSL0AQoMTmV3U3RvY2tJbmZvEgwK", 
            "BGNvZGUYASACKAkSDAoEbmFtZRgCIAIoCRISCgphcHBseXVwcGVyGAMgASgJ", 
            "EhAKCGlwb3ByaWNlGAQgASgJEhAKCGxpc3RkYXRlGAUgASgJEhMKC2xvdHRl", 
            "cnlyYXRlGAYgASgJEg8KB3BlcmF0aW8YByABKAkSFQoNaW5kdXN0cnlyYXRp", 
            "bxgIIAEoCRISCgp0cmFkaW5nbnVtGAkgASgFEhQKDHRyYWRpbmdyYW5nZRgK", 
            "IAEoAhIUCgxyZXRyZWF0cmFuZ2UYCyABKAISEwoLc2Vjb25kcmFuZ2UYDCAB", 
            "KAIiPwoUTmV3U3RvY2tEYXRhUmVzcG9uc2USJwoEZGF0YRgBIAMoCzIZLlN0", 
            "b2NrU2VydmVyLk5ld1N0b2NrSW5mbyIfCg5JcG9EYXRhUmVxdWVzdBINCgVk", 
            "dW1teRgBIAEoCSKYAQoHSXBvSW5mbxIMCgRjb2RlGAEgAigJEgwKBG5hbWUY", 
            "AiACKAkSEQoJYXBwbHljb2RlGAMgASgJEhIKCmFwcGx5dXBwZXIYBCABKAkS", 
            "EAoIaXBvcHJpY2UYBSABKAkSEAoIbGlzdGRhdGUYBiABKAkSDwoHcGVyYXRp", 
            "bxgHIAEoCRIVCg1pbmR1c3RyeXJhdGlvGAggASgJIjUKD0lwb0RhdGFSZXNw", 
            "b25zZRIiCgRkYXRhGAEgAygLMhQuU3RvY2tTZXJ2ZXIuSXBvSW5mbyowCgZQ", 
            "ZXJpb2QSBwoDREFZEAESCAoEV0VFSxACEgkKBU1PTlRIEAMSCAoEWUVBUhAE", 
          "QhsKDGNvbS5wcm90b2J1ZkILU3RvY2tTZXJ2ZXI="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_StockServer_StockData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_StockServer_StockData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.StockData, global::StockServer.StockData.Builder>(internal__static_StockServer_StockData__Descriptor,
                new string[] { "Datetime", "Open", "Close", "Low", "High", "Volume", "Amount", "Lastclose", });
        internal__static_StockServer_StockDataRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_StockServer_StockDataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.StockDataRequest, global::StockServer.StockDataRequest.Builder>(internal__static_StockServer_StockDataRequest__Descriptor,
                new string[] { "Code", "Type", "Per", "From", "To", "Num", });
        internal__static_StockServer_StockDataResponse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_StockServer_StockDataResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.StockDataResponse, global::StockServer.StockDataResponse.Builder>(internal__static_StockServer_StockDataResponse__Descriptor,
                new string[] { "Code", "Per", "Data", });
        internal__static_StockServer_TickData__Descriptor = Descriptor.MessageTypes[3];
        internal__static_StockServer_TickData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.TickData, global::StockServer.TickData.Builder>(internal__static_StockServer_TickData__Descriptor,
                new string[] { "Datetime", "Price", "Volume", "Amount", });
        internal__static_StockServer_TickDataRequest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_StockServer_TickDataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.TickDataRequest, global::StockServer.TickDataRequest.Builder>(internal__static_StockServer_TickDataRequest__Descriptor,
                new string[] { "Code", "Datetime", });
        internal__static_StockServer_TickDataResponse__Descriptor = Descriptor.MessageTypes[5];
        internal__static_StockServer_TickDataResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.TickDataResponse, global::StockServer.TickDataResponse.Builder>(internal__static_StockServer_TickDataResponse__Descriptor,
                new string[] { "Code", "Data", });
        internal__static_StockServer_StockInfo__Descriptor = Descriptor.MessageTypes[6];
        internal__static_StockServer_StockInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.StockInfo, global::StockServer.StockInfo.Builder>(internal__static_StockServer_StockInfo__Descriptor,
                new string[] { "Code", "Name", "Per", "Pb", "Mktcap", "Nmc", });
        internal__static_StockServer_StockInfoRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_StockServer_StockInfoRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.StockInfoRequest, global::StockServer.StockInfoRequest.Builder>(internal__static_StockServer_StockInfoRequest__Descriptor,
                new string[] { "Type", });
        internal__static_StockServer_StockInfoResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_StockServer_StockInfoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.StockInfoResponse, global::StockServer.StockInfoResponse.Builder>(internal__static_StockServer_StockInfoResponse__Descriptor,
                new string[] { "Data", });
        internal__static_StockServer_NewStockDataRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_StockServer_NewStockDataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.NewStockDataRequest, global::StockServer.NewStockDataRequest.Builder>(internal__static_StockServer_NewStockDataRequest__Descriptor,
                new string[] { "Dummy", });
        internal__static_StockServer_NewStockInfo__Descriptor = Descriptor.MessageTypes[10];
        internal__static_StockServer_NewStockInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.NewStockInfo, global::StockServer.NewStockInfo.Builder>(internal__static_StockServer_NewStockInfo__Descriptor,
                new string[] { "Code", "Name", "Applyupper", "Ipoprice", "Listdate", "Lotteryrate", "Peratio", "Industryratio", "Tradingnum", "Tradingrange", "Retreatrange", "Secondrange", });
        internal__static_StockServer_NewStockDataResponse__Descriptor = Descriptor.MessageTypes[11];
        internal__static_StockServer_NewStockDataResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.NewStockDataResponse, global::StockServer.NewStockDataResponse.Builder>(internal__static_StockServer_NewStockDataResponse__Descriptor,
                new string[] { "Data", });
        internal__static_StockServer_IpoDataRequest__Descriptor = Descriptor.MessageTypes[12];
        internal__static_StockServer_IpoDataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.IpoDataRequest, global::StockServer.IpoDataRequest.Builder>(internal__static_StockServer_IpoDataRequest__Descriptor,
                new string[] { "Dummy", });
        internal__static_StockServer_IpoInfo__Descriptor = Descriptor.MessageTypes[13];
        internal__static_StockServer_IpoInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.IpoInfo, global::StockServer.IpoInfo.Builder>(internal__static_StockServer_IpoInfo__Descriptor,
                new string[] { "Code", "Name", "Applycode", "Applyupper", "Ipoprice", "Listdate", "Peratio", "Industryratio", });
        internal__static_StockServer_IpoDataResponse__Descriptor = Descriptor.MessageTypes[14];
        internal__static_StockServer_IpoDataResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StockServer.IpoDataResponse, global::StockServer.IpoDataResponse.Builder>(internal__static_StockServer_IpoDataResponse__Descriptor,
                new string[] { "Data", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum Period {
    DAY = 1,
    WEEK = 2,
    MONTH = 3,
    YEAR = 4,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StockData : pb::GeneratedMessage<StockData, StockData.Builder> {
    private StockData() { }
    private static readonly StockData defaultInstance = new StockData().MakeReadOnly();
    private static readonly string[] _stockDataFieldNames = new string[] { "amount", "close", "datetime", "high", "lastclose", "low", "open", "volume" };
    private static readonly uint[] _stockDataFieldTags = new uint[] { 61, 29, 10, 45, 69, 37, 21, 53 };
    public static StockData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StockData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StockData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StockData, StockData.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockData__FieldAccessorTable; }
    }
    
    public const int DatetimeFieldNumber = 1;
    private bool hasDatetime;
    private string datetime_ = "";
    public bool HasDatetime {
      get { return hasDatetime; }
    }
    public string Datetime {
      get { return datetime_; }
    }
    
    public const int OpenFieldNumber = 2;
    private bool hasOpen;
    private float open_;
    public bool HasOpen {
      get { return hasOpen; }
    }
    public float Open {
      get { return open_; }
    }
    
    public const int CloseFieldNumber = 3;
    private bool hasClose;
    private float close_;
    public bool HasClose {
      get { return hasClose; }
    }
    public float Close {
      get { return close_; }
    }
    
    public const int LowFieldNumber = 4;
    private bool hasLow;
    private float low_;
    public bool HasLow {
      get { return hasLow; }
    }
    public float Low {
      get { return low_; }
    }
    
    public const int HighFieldNumber = 5;
    private bool hasHigh;
    private float high_;
    public bool HasHigh {
      get { return hasHigh; }
    }
    public float High {
      get { return high_; }
    }
    
    public const int VolumeFieldNumber = 6;
    private bool hasVolume;
    private float volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public float Volume {
      get { return volume_; }
    }
    
    public const int AmountFieldNumber = 7;
    private bool hasAmount;
    private float amount_;
    public bool HasAmount {
      get { return hasAmount; }
    }
    public float Amount {
      get { return amount_; }
    }
    
    public const int LastcloseFieldNumber = 8;
    private bool hasLastclose;
    private float lastclose_;
    public bool HasLastclose {
      get { return hasLastclose; }
    }
    public float Lastclose {
      get { return lastclose_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDatetime) return false;
        if (!hasOpen) return false;
        if (!hasClose) return false;
        if (!hasLow) return false;
        if (!hasHigh) return false;
        if (!hasVolume) return false;
        if (!hasAmount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stockDataFieldNames;
      if (hasDatetime) {
        output.WriteString(1, field_names[2], Datetime);
      }
      if (hasOpen) {
        output.WriteFloat(2, field_names[6], Open);
      }
      if (hasClose) {
        output.WriteFloat(3, field_names[1], Close);
      }
      if (hasLow) {
        output.WriteFloat(4, field_names[5], Low);
      }
      if (hasHigh) {
        output.WriteFloat(5, field_names[3], High);
      }
      if (hasVolume) {
        output.WriteFloat(6, field_names[7], Volume);
      }
      if (hasAmount) {
        output.WriteFloat(7, field_names[0], Amount);
      }
      if (hasLastclose) {
        output.WriteFloat(8, field_names[4], Lastclose);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDatetime) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Datetime);
      }
      if (hasOpen) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Open);
      }
      if (hasClose) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Close);
      }
      if (hasLow) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, Low);
      }
      if (hasHigh) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, High);
      }
      if (hasVolume) {
        size += pb::CodedOutputStream.ComputeFloatSize(6, Volume);
      }
      if (hasAmount) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, Amount);
      }
      if (hasLastclose) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, Lastclose);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StockData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StockData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StockData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StockData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StockData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StockData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StockData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StockData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StockData result;
      
      private StockData PrepareBuilder() {
        if (resultIsReadOnly) {
          StockData original = result;
          result = new StockData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StockData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.StockData.Descriptor; }
      }
      
      public override StockData DefaultInstanceForType {
        get { return global::StockServer.StockData.DefaultInstance; }
      }
      
      public override StockData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StockData) {
          return MergeFrom((StockData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StockData other) {
        if (other == global::StockServer.StockData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDatetime) {
          Datetime = other.Datetime;
        }
        if (other.HasOpen) {
          Open = other.Open;
        }
        if (other.HasClose) {
          Close = other.Close;
        }
        if (other.HasLow) {
          Low = other.Low;
        }
        if (other.HasHigh) {
          High = other.High;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasAmount) {
          Amount = other.Amount;
        }
        if (other.HasLastclose) {
          Lastclose = other.Lastclose;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stockDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stockDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDatetime = input.ReadString(ref result.datetime_);
              break;
            }
            case 21: {
              result.hasOpen = input.ReadFloat(ref result.open_);
              break;
            }
            case 29: {
              result.hasClose = input.ReadFloat(ref result.close_);
              break;
            }
            case 37: {
              result.hasLow = input.ReadFloat(ref result.low_);
              break;
            }
            case 45: {
              result.hasHigh = input.ReadFloat(ref result.high_);
              break;
            }
            case 53: {
              result.hasVolume = input.ReadFloat(ref result.volume_);
              break;
            }
            case 61: {
              result.hasAmount = input.ReadFloat(ref result.amount_);
              break;
            }
            case 69: {
              result.hasLastclose = input.ReadFloat(ref result.lastclose_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDatetime {
        get { return result.hasDatetime; }
      }
      public string Datetime {
        get { return result.Datetime; }
        set { SetDatetime(value); }
      }
      public Builder SetDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDatetime = true;
        result.datetime_ = value;
        return this;
      }
      public Builder ClearDatetime() {
        PrepareBuilder();
        result.hasDatetime = false;
        result.datetime_ = "";
        return this;
      }
      
      public bool HasOpen {
        get { return result.hasOpen; }
      }
      public float Open {
        get { return result.Open; }
        set { SetOpen(value); }
      }
      public Builder SetOpen(float value) {
        PrepareBuilder();
        result.hasOpen = true;
        result.open_ = value;
        return this;
      }
      public Builder ClearOpen() {
        PrepareBuilder();
        result.hasOpen = false;
        result.open_ = 0F;
        return this;
      }
      
      public bool HasClose {
        get { return result.hasClose; }
      }
      public float Close {
        get { return result.Close; }
        set { SetClose(value); }
      }
      public Builder SetClose(float value) {
        PrepareBuilder();
        result.hasClose = true;
        result.close_ = value;
        return this;
      }
      public Builder ClearClose() {
        PrepareBuilder();
        result.hasClose = false;
        result.close_ = 0F;
        return this;
      }
      
      public bool HasLow {
        get { return result.hasLow; }
      }
      public float Low {
        get { return result.Low; }
        set { SetLow(value); }
      }
      public Builder SetLow(float value) {
        PrepareBuilder();
        result.hasLow = true;
        result.low_ = value;
        return this;
      }
      public Builder ClearLow() {
        PrepareBuilder();
        result.hasLow = false;
        result.low_ = 0F;
        return this;
      }
      
      public bool HasHigh {
        get { return result.hasHigh; }
      }
      public float High {
        get { return result.High; }
        set { SetHigh(value); }
      }
      public Builder SetHigh(float value) {
        PrepareBuilder();
        result.hasHigh = true;
        result.high_ = value;
        return this;
      }
      public Builder ClearHigh() {
        PrepareBuilder();
        result.hasHigh = false;
        result.high_ = 0F;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public float Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(float value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0F;
        return this;
      }
      
      public bool HasAmount {
        get { return result.hasAmount; }
      }
      public float Amount {
        get { return result.Amount; }
        set { SetAmount(value); }
      }
      public Builder SetAmount(float value) {
        PrepareBuilder();
        result.hasAmount = true;
        result.amount_ = value;
        return this;
      }
      public Builder ClearAmount() {
        PrepareBuilder();
        result.hasAmount = false;
        result.amount_ = 0F;
        return this;
      }
      
      public bool HasLastclose {
        get { return result.hasLastclose; }
      }
      public float Lastclose {
        get { return result.Lastclose; }
        set { SetLastclose(value); }
      }
      public Builder SetLastclose(float value) {
        PrepareBuilder();
        result.hasLastclose = true;
        result.lastclose_ = value;
        return this;
      }
      public Builder ClearLastclose() {
        PrepareBuilder();
        result.hasLastclose = false;
        result.lastclose_ = 0F;
        return this;
      }
    }
    static StockData() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StockDataRequest : pb::GeneratedMessage<StockDataRequest, StockDataRequest.Builder> {
    private StockDataRequest() { }
    private static readonly StockDataRequest defaultInstance = new StockDataRequest().MakeReadOnly();
    private static readonly string[] _stockDataRequestFieldNames = new string[] { "code", "from", "num", "per", "to", "type" };
    private static readonly uint[] _stockDataRequestFieldTags = new uint[] { 10, 34, 48, 24, 42, 16 };
    public static StockDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StockDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StockDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StockDataRequest, StockDataRequest.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockDataRequest__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int PerFieldNumber = 3;
    private bool hasPer;
    private global::StockServer.Period per_ = global::StockServer.Period.DAY;
    public bool HasPer {
      get { return hasPer; }
    }
    public global::StockServer.Period Per {
      get { return per_; }
    }
    
    public const int FromFieldNumber = 4;
    private bool hasFrom;
    private string from_ = "0";
    public bool HasFrom {
      get { return hasFrom; }
    }
    public string From {
      get { return from_; }
    }
    
    public const int ToFieldNumber = 5;
    private bool hasTo;
    private string to_ = "0";
    public bool HasTo {
      get { return hasTo; }
    }
    public string To {
      get { return to_; }
    }
    
    public const int NumFieldNumber = 6;
    private bool hasNum;
    private int num_ = 20;
    public bool HasNum {
      get { return hasNum; }
    }
    public int Num {
      get { return num_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasType) return false;
        if (!hasPer) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stockDataRequestFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[5], Type);
      }
      if (hasPer) {
        output.WriteEnum(3, field_names[3], (int) Per, Per);
      }
      if (hasFrom) {
        output.WriteString(4, field_names[1], From);
      }
      if (hasTo) {
        output.WriteString(5, field_names[4], To);
      }
      if (hasNum) {
        output.WriteInt32(6, field_names[2], Num);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      if (hasPer) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Per);
      }
      if (hasFrom) {
        size += pb::CodedOutputStream.ComputeStringSize(4, From);
      }
      if (hasTo) {
        size += pb::CodedOutputStream.ComputeStringSize(5, To);
      }
      if (hasNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Num);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StockDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StockDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StockDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StockDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StockDataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StockDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StockDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StockDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StockDataRequest result;
      
      private StockDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          StockDataRequest original = result;
          result = new StockDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StockDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.StockDataRequest.Descriptor; }
      }
      
      public override StockDataRequest DefaultInstanceForType {
        get { return global::StockServer.StockDataRequest.DefaultInstance; }
      }
      
      public override StockDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StockDataRequest) {
          return MergeFrom((StockDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StockDataRequest other) {
        if (other == global::StockServer.StockDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasPer) {
          Per = other.Per;
        }
        if (other.HasFrom) {
          From = other.From;
        }
        if (other.HasTo) {
          To = other.To;
        }
        if (other.HasNum) {
          Num = other.Num;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stockDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stockDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.per_, out unknown)) {
                result.hasPer = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34: {
              result.hasFrom = input.ReadString(ref result.from_);
              break;
            }
            case 42: {
              result.hasTo = input.ReadString(ref result.to_);
              break;
            }
            case 48: {
              result.hasNum = input.ReadInt32(ref result.num_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasPer {
       get { return result.hasPer; }
      }
      public global::StockServer.Period Per {
        get { return result.Per; }
        set { SetPer(value); }
      }
      public Builder SetPer(global::StockServer.Period value) {
        PrepareBuilder();
        result.hasPer = true;
        result.per_ = value;
        return this;
      }
      public Builder ClearPer() {
        PrepareBuilder();
        result.hasPer = false;
        result.per_ = global::StockServer.Period.DAY;
        return this;
      }
      
      public bool HasFrom {
        get { return result.hasFrom; }
      }
      public string From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = "0";
        return this;
      }
      
      public bool HasTo {
        get { return result.hasTo; }
      }
      public string To {
        get { return result.To; }
        set { SetTo(value); }
      }
      public Builder SetTo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTo = true;
        result.to_ = value;
        return this;
      }
      public Builder ClearTo() {
        PrepareBuilder();
        result.hasTo = false;
        result.to_ = "0";
        return this;
      }
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 20;
        return this;
      }
    }
    static StockDataRequest() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StockDataResponse : pb::GeneratedMessage<StockDataResponse, StockDataResponse.Builder> {
    private StockDataResponse() { }
    private static readonly StockDataResponse defaultInstance = new StockDataResponse().MakeReadOnly();
    private static readonly string[] _stockDataResponseFieldNames = new string[] { "code", "data", "per" };
    private static readonly uint[] _stockDataResponseFieldTags = new uint[] { 10, 26, 16 };
    public static StockDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StockDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StockDataResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockDataResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StockDataResponse, StockDataResponse.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockDataResponse__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int PerFieldNumber = 2;
    private bool hasPer;
    private global::StockServer.Period per_ = global::StockServer.Period.DAY;
    public bool HasPer {
      get { return hasPer; }
    }
    public global::StockServer.Period Per {
      get { return per_; }
    }
    
    public const int DataFieldNumber = 3;
    private pbc::PopsicleList<global::StockServer.StockData> data_ = new pbc::PopsicleList<global::StockServer.StockData>();
    public scg::IList<global::StockServer.StockData> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::StockServer.StockData GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasPer) return false;
        foreach (global::StockServer.StockData element in DataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stockDataResponseFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (hasPer) {
        output.WriteEnum(2, field_names[2], (int) Per, Per);
      }
      if (data_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasPer) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Per);
      }
      foreach (global::StockServer.StockData element in DataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StockDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StockDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StockDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StockDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StockDataResponse MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StockDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StockDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StockDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StockDataResponse result;
      
      private StockDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          StockDataResponse original = result;
          result = new StockDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StockDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.StockDataResponse.Descriptor; }
      }
      
      public override StockDataResponse DefaultInstanceForType {
        get { return global::StockServer.StockDataResponse.DefaultInstance; }
      }
      
      public override StockDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StockDataResponse) {
          return MergeFrom((StockDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StockDataResponse other) {
        if (other == global::StockServer.StockDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasPer) {
          Per = other.Per;
        }
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stockDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stockDataResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.per_, out unknown)) {
                result.hasPer = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.data_, global::StockServer.StockData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasPer {
       get { return result.hasPer; }
      }
      public global::StockServer.Period Per {
        get { return result.Per; }
        set { SetPer(value); }
      }
      public Builder SetPer(global::StockServer.Period value) {
        PrepareBuilder();
        result.hasPer = true;
        result.per_ = value;
        return this;
      }
      public Builder ClearPer() {
        PrepareBuilder();
        result.hasPer = false;
        result.per_ = global::StockServer.Period.DAY;
        return this;
      }
      
      public pbc::IPopsicleList<global::StockServer.StockData> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::StockServer.StockData GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::StockServer.StockData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::StockServer.StockData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::StockServer.StockData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::StockServer.StockData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::StockServer.StockData> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static StockDataResponse() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TickData : pb::GeneratedMessage<TickData, TickData.Builder> {
    private TickData() { }
    private static readonly TickData defaultInstance = new TickData().MakeReadOnly();
    private static readonly string[] _tickDataFieldNames = new string[] { "amount", "datetime", "price", "volume" };
    private static readonly uint[] _tickDataFieldTags = new uint[] { 37, 10, 21, 29 };
    public static TickData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TickData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TickData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_TickData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TickData, TickData.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_TickData__FieldAccessorTable; }
    }
    
    public const int DatetimeFieldNumber = 1;
    private bool hasDatetime;
    private string datetime_ = "";
    public bool HasDatetime {
      get { return hasDatetime; }
    }
    public string Datetime {
      get { return datetime_; }
    }
    
    public const int PriceFieldNumber = 2;
    private bool hasPrice;
    private float price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public float Price {
      get { return price_; }
    }
    
    public const int VolumeFieldNumber = 3;
    private bool hasVolume;
    private float volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public float Volume {
      get { return volume_; }
    }
    
    public const int AmountFieldNumber = 4;
    private bool hasAmount;
    private float amount_;
    public bool HasAmount {
      get { return hasAmount; }
    }
    public float Amount {
      get { return amount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDatetime) return false;
        if (!hasPrice) return false;
        if (!hasVolume) return false;
        if (!hasAmount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tickDataFieldNames;
      if (hasDatetime) {
        output.WriteString(1, field_names[1], Datetime);
      }
      if (hasPrice) {
        output.WriteFloat(2, field_names[2], Price);
      }
      if (hasVolume) {
        output.WriteFloat(3, field_names[3], Volume);
      }
      if (hasAmount) {
        output.WriteFloat(4, field_names[0], Amount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDatetime) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Datetime);
      }
      if (hasPrice) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Price);
      }
      if (hasVolume) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Volume);
      }
      if (hasAmount) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, Amount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TickData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TickData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TickData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TickData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TickData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TickData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TickData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TickData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TickData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TickData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TickData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TickData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TickData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TickData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TickData result;
      
      private TickData PrepareBuilder() {
        if (resultIsReadOnly) {
          TickData original = result;
          result = new TickData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TickData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.TickData.Descriptor; }
      }
      
      public override TickData DefaultInstanceForType {
        get { return global::StockServer.TickData.DefaultInstance; }
      }
      
      public override TickData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TickData) {
          return MergeFrom((TickData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TickData other) {
        if (other == global::StockServer.TickData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDatetime) {
          Datetime = other.Datetime;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasAmount) {
          Amount = other.Amount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tickDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tickDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDatetime = input.ReadString(ref result.datetime_);
              break;
            }
            case 21: {
              result.hasPrice = input.ReadFloat(ref result.price_);
              break;
            }
            case 29: {
              result.hasVolume = input.ReadFloat(ref result.volume_);
              break;
            }
            case 37: {
              result.hasAmount = input.ReadFloat(ref result.amount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDatetime {
        get { return result.hasDatetime; }
      }
      public string Datetime {
        get { return result.Datetime; }
        set { SetDatetime(value); }
      }
      public Builder SetDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDatetime = true;
        result.datetime_ = value;
        return this;
      }
      public Builder ClearDatetime() {
        PrepareBuilder();
        result.hasDatetime = false;
        result.datetime_ = "";
        return this;
      }
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public float Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(float value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0F;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public float Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(float value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0F;
        return this;
      }
      
      public bool HasAmount {
        get { return result.hasAmount; }
      }
      public float Amount {
        get { return result.Amount; }
        set { SetAmount(value); }
      }
      public Builder SetAmount(float value) {
        PrepareBuilder();
        result.hasAmount = true;
        result.amount_ = value;
        return this;
      }
      public Builder ClearAmount() {
        PrepareBuilder();
        result.hasAmount = false;
        result.amount_ = 0F;
        return this;
      }
    }
    static TickData() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TickDataRequest : pb::GeneratedMessage<TickDataRequest, TickDataRequest.Builder> {
    private TickDataRequest() { }
    private static readonly TickDataRequest defaultInstance = new TickDataRequest().MakeReadOnly();
    private static readonly string[] _tickDataRequestFieldNames = new string[] { "code", "datetime" };
    private static readonly uint[] _tickDataRequestFieldTags = new uint[] { 10, 18 };
    public static TickDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TickDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TickDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_TickDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TickDataRequest, TickDataRequest.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_TickDataRequest__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int DatetimeFieldNumber = 2;
    private bool hasDatetime;
    private string datetime_ = "";
    public bool HasDatetime {
      get { return hasDatetime; }
    }
    public string Datetime {
      get { return datetime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasDatetime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tickDataRequestFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (hasDatetime) {
        output.WriteString(2, field_names[1], Datetime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasDatetime) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Datetime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TickDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TickDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TickDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TickDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TickDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TickDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TickDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TickDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TickDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TickDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TickDataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TickDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TickDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TickDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TickDataRequest result;
      
      private TickDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          TickDataRequest original = result;
          result = new TickDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TickDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.TickDataRequest.Descriptor; }
      }
      
      public override TickDataRequest DefaultInstanceForType {
        get { return global::StockServer.TickDataRequest.DefaultInstance; }
      }
      
      public override TickDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TickDataRequest) {
          return MergeFrom((TickDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TickDataRequest other) {
        if (other == global::StockServer.TickDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasDatetime) {
          Datetime = other.Datetime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tickDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tickDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 18: {
              result.hasDatetime = input.ReadString(ref result.datetime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasDatetime {
        get { return result.hasDatetime; }
      }
      public string Datetime {
        get { return result.Datetime; }
        set { SetDatetime(value); }
      }
      public Builder SetDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDatetime = true;
        result.datetime_ = value;
        return this;
      }
      public Builder ClearDatetime() {
        PrepareBuilder();
        result.hasDatetime = false;
        result.datetime_ = "";
        return this;
      }
    }
    static TickDataRequest() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TickDataResponse : pb::GeneratedMessage<TickDataResponse, TickDataResponse.Builder> {
    private TickDataResponse() { }
    private static readonly TickDataResponse defaultInstance = new TickDataResponse().MakeReadOnly();
    private static readonly string[] _tickDataResponseFieldNames = new string[] { "code", "data" };
    private static readonly uint[] _tickDataResponseFieldTags = new uint[] { 10, 18 };
    public static TickDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TickDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TickDataResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_TickDataResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TickDataResponse, TickDataResponse.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_TickDataResponse__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int DataFieldNumber = 2;
    private pbc::PopsicleList<global::StockServer.TickData> data_ = new pbc::PopsicleList<global::StockServer.TickData>();
    public scg::IList<global::StockServer.TickData> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::StockServer.TickData GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        foreach (global::StockServer.TickData element in DataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tickDataResponseFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (data_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      foreach (global::StockServer.TickData element in DataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TickDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TickDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TickDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TickDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TickDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TickDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TickDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TickDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TickDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TickDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TickDataResponse MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TickDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TickDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TickDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TickDataResponse result;
      
      private TickDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          TickDataResponse original = result;
          result = new TickDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TickDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.TickDataResponse.Descriptor; }
      }
      
      public override TickDataResponse DefaultInstanceForType {
        get { return global::StockServer.TickDataResponse.DefaultInstance; }
      }
      
      public override TickDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TickDataResponse) {
          return MergeFrom((TickDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TickDataResponse other) {
        if (other == global::StockServer.TickDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tickDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tickDataResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.data_, global::StockServer.TickData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::StockServer.TickData> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::StockServer.TickData GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::StockServer.TickData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::StockServer.TickData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::StockServer.TickData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::StockServer.TickData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::StockServer.TickData> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static TickDataResponse() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StockInfo : pb::GeneratedMessage<StockInfo, StockInfo.Builder> {
    private StockInfo() { }
    private static readonly StockInfo defaultInstance = new StockInfo().MakeReadOnly();
    private static readonly string[] _stockInfoFieldNames = new string[] { "code", "mktcap", "name", "nmc", "pb", "per" };
    private static readonly uint[] _stockInfoFieldTags = new uint[] { 10, 45, 18, 53, 37, 29 };
    public static StockInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StockInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StockInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StockInfo, StockInfo.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockInfo__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int PerFieldNumber = 3;
    private bool hasPer;
    private float per_;
    public bool HasPer {
      get { return hasPer; }
    }
    public float Per {
      get { return per_; }
    }
    
    public const int PbFieldNumber = 4;
    private bool hasPb;
    private float pb_;
    public bool HasPb {
      get { return hasPb; }
    }
    public float Pb {
      get { return pb_; }
    }
    
    public const int MktcapFieldNumber = 5;
    private bool hasMktcap;
    private float mktcap_;
    public bool HasMktcap {
      get { return hasMktcap; }
    }
    public float Mktcap {
      get { return mktcap_; }
    }
    
    public const int NmcFieldNumber = 6;
    private bool hasNmc;
    private float nmc_;
    public bool HasNmc {
      get { return hasNmc; }
    }
    public float Nmc {
      get { return nmc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stockInfoFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasPer) {
        output.WriteFloat(3, field_names[5], Per);
      }
      if (hasPb) {
        output.WriteFloat(4, field_names[4], Pb);
      }
      if (hasMktcap) {
        output.WriteFloat(5, field_names[1], Mktcap);
      }
      if (hasNmc) {
        output.WriteFloat(6, field_names[3], Nmc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasPer) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Per);
      }
      if (hasPb) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, Pb);
      }
      if (hasMktcap) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, Mktcap);
      }
      if (hasNmc) {
        size += pb::CodedOutputStream.ComputeFloatSize(6, Nmc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StockInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StockInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StockInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StockInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StockInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StockInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StockInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StockInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StockInfo result;
      
      private StockInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          StockInfo original = result;
          result = new StockInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StockInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.StockInfo.Descriptor; }
      }
      
      public override StockInfo DefaultInstanceForType {
        get { return global::StockServer.StockInfo.DefaultInstance; }
      }
      
      public override StockInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StockInfo) {
          return MergeFrom((StockInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StockInfo other) {
        if (other == global::StockServer.StockInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasPer) {
          Per = other.Per;
        }
        if (other.HasPb) {
          Pb = other.Pb;
        }
        if (other.HasMktcap) {
          Mktcap = other.Mktcap;
        }
        if (other.HasNmc) {
          Nmc = other.Nmc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stockInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stockInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 29: {
              result.hasPer = input.ReadFloat(ref result.per_);
              break;
            }
            case 37: {
              result.hasPb = input.ReadFloat(ref result.pb_);
              break;
            }
            case 45: {
              result.hasMktcap = input.ReadFloat(ref result.mktcap_);
              break;
            }
            case 53: {
              result.hasNmc = input.ReadFloat(ref result.nmc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasPer {
        get { return result.hasPer; }
      }
      public float Per {
        get { return result.Per; }
        set { SetPer(value); }
      }
      public Builder SetPer(float value) {
        PrepareBuilder();
        result.hasPer = true;
        result.per_ = value;
        return this;
      }
      public Builder ClearPer() {
        PrepareBuilder();
        result.hasPer = false;
        result.per_ = 0F;
        return this;
      }
      
      public bool HasPb {
        get { return result.hasPb; }
      }
      public float Pb {
        get { return result.Pb; }
        set { SetPb(value); }
      }
      public Builder SetPb(float value) {
        PrepareBuilder();
        result.hasPb = true;
        result.pb_ = value;
        return this;
      }
      public Builder ClearPb() {
        PrepareBuilder();
        result.hasPb = false;
        result.pb_ = 0F;
        return this;
      }
      
      public bool HasMktcap {
        get { return result.hasMktcap; }
      }
      public float Mktcap {
        get { return result.Mktcap; }
        set { SetMktcap(value); }
      }
      public Builder SetMktcap(float value) {
        PrepareBuilder();
        result.hasMktcap = true;
        result.mktcap_ = value;
        return this;
      }
      public Builder ClearMktcap() {
        PrepareBuilder();
        result.hasMktcap = false;
        result.mktcap_ = 0F;
        return this;
      }
      
      public bool HasNmc {
        get { return result.hasNmc; }
      }
      public float Nmc {
        get { return result.Nmc; }
        set { SetNmc(value); }
      }
      public Builder SetNmc(float value) {
        PrepareBuilder();
        result.hasNmc = true;
        result.nmc_ = value;
        return this;
      }
      public Builder ClearNmc() {
        PrepareBuilder();
        result.hasNmc = false;
        result.nmc_ = 0F;
        return this;
      }
    }
    static StockInfo() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StockInfoRequest : pb::GeneratedMessage<StockInfoRequest, StockInfoRequest.Builder> {
    private StockInfoRequest() { }
    private static readonly StockInfoRequest defaultInstance = new StockInfoRequest().MakeReadOnly();
    private static readonly string[] _stockInfoRequestFieldNames = new string[] { "type" };
    private static readonly uint[] _stockInfoRequestFieldTags = new uint[] { 8 };
    public static StockInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StockInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StockInfoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockInfoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StockInfoRequest, StockInfoRequest.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockInfoRequest__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stockInfoRequestFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StockInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StockInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StockInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StockInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StockInfoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StockInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StockInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StockInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StockInfoRequest result;
      
      private StockInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          StockInfoRequest original = result;
          result = new StockInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StockInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.StockInfoRequest.Descriptor; }
      }
      
      public override StockInfoRequest DefaultInstanceForType {
        get { return global::StockServer.StockInfoRequest.DefaultInstance; }
      }
      
      public override StockInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StockInfoRequest) {
          return MergeFrom((StockInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StockInfoRequest other) {
        if (other == global::StockServer.StockInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stockInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stockInfoRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static StockInfoRequest() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StockInfoResponse : pb::GeneratedMessage<StockInfoResponse, StockInfoResponse.Builder> {
    private StockInfoResponse() { }
    private static readonly StockInfoResponse defaultInstance = new StockInfoResponse().MakeReadOnly();
    private static readonly string[] _stockInfoResponseFieldNames = new string[] { "data" };
    private static readonly uint[] _stockInfoResponseFieldTags = new uint[] { 10 };
    public static StockInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StockInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StockInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StockInfoResponse, StockInfoResponse.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_StockInfoResponse__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private pbc::PopsicleList<global::StockServer.StockInfo> data_ = new pbc::PopsicleList<global::StockServer.StockInfo>();
    public scg::IList<global::StockServer.StockInfo> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::StockServer.StockInfo GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::StockServer.StockInfo element in DataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stockInfoResponseFieldNames;
      if (data_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::StockServer.StockInfo element in DataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static StockInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StockInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StockInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StockInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StockInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StockInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StockInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StockInfoResponse MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StockInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StockInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StockInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StockInfoResponse result;
      
      private StockInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          StockInfoResponse original = result;
          result = new StockInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StockInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.StockInfoResponse.Descriptor; }
      }
      
      public override StockInfoResponse DefaultInstanceForType {
        get { return global::StockServer.StockInfoResponse.DefaultInstance; }
      }
      
      public override StockInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StockInfoResponse) {
          return MergeFrom((StockInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StockInfoResponse other) {
        if (other == global::StockServer.StockInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stockInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stockInfoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.data_, global::StockServer.StockInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::StockServer.StockInfo> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::StockServer.StockInfo GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::StockServer.StockInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::StockServer.StockInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::StockServer.StockInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::StockServer.StockInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::StockServer.StockInfo> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static StockInfoResponse() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewStockDataRequest : pb::GeneratedMessage<NewStockDataRequest, NewStockDataRequest.Builder> {
    private NewStockDataRequest() { }
    private static readonly NewStockDataRequest defaultInstance = new NewStockDataRequest().MakeReadOnly();
    private static readonly string[] _newStockDataRequestFieldNames = new string[] { "dummy" };
    private static readonly uint[] _newStockDataRequestFieldTags = new uint[] { 10 };
    public static NewStockDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewStockDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewStockDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_NewStockDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewStockDataRequest, NewStockDataRequest.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_NewStockDataRequest__FieldAccessorTable; }
    }
    
    public const int DummyFieldNumber = 1;
    private bool hasDummy;
    private string dummy_ = "";
    public bool HasDummy {
      get { return hasDummy; }
    }
    public string Dummy {
      get { return dummy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _newStockDataRequestFieldNames;
      if (hasDummy) {
        output.WriteString(1, field_names[0], Dummy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDummy) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Dummy);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NewStockDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewStockDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewStockDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewStockDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewStockDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewStockDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewStockDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewStockDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewStockDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewStockDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewStockDataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewStockDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewStockDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewStockDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewStockDataRequest result;
      
      private NewStockDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NewStockDataRequest original = result;
          result = new NewStockDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewStockDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.NewStockDataRequest.Descriptor; }
      }
      
      public override NewStockDataRequest DefaultInstanceForType {
        get { return global::StockServer.NewStockDataRequest.DefaultInstance; }
      }
      
      public override NewStockDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewStockDataRequest) {
          return MergeFrom((NewStockDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewStockDataRequest other) {
        if (other == global::StockServer.NewStockDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDummy) {
          Dummy = other.Dummy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newStockDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newStockDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDummy = input.ReadString(ref result.dummy_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDummy {
        get { return result.hasDummy; }
      }
      public string Dummy {
        get { return result.Dummy; }
        set { SetDummy(value); }
      }
      public Builder SetDummy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDummy = true;
        result.dummy_ = value;
        return this;
      }
      public Builder ClearDummy() {
        PrepareBuilder();
        result.hasDummy = false;
        result.dummy_ = "";
        return this;
      }
    }
    static NewStockDataRequest() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewStockInfo : pb::GeneratedMessage<NewStockInfo, NewStockInfo.Builder> {
    private NewStockInfo() { }
    private static readonly NewStockInfo defaultInstance = new NewStockInfo().MakeReadOnly();
    private static readonly string[] _newStockInfoFieldNames = new string[] { "applyupper", "code", "industryratio", "ipoprice", "listdate", "lotteryrate", "name", "peratio", "retreatrange", "secondrange", "tradingnum", "tradingrange" };
    private static readonly uint[] _newStockInfoFieldTags = new uint[] { 26, 10, 66, 34, 42, 50, 18, 58, 93, 101, 72, 85 };
    public static NewStockInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewStockInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewStockInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_NewStockInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewStockInfo, NewStockInfo.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_NewStockInfo__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ApplyupperFieldNumber = 3;
    private bool hasApplyupper;
    private string applyupper_ = "";
    public bool HasApplyupper {
      get { return hasApplyupper; }
    }
    public string Applyupper {
      get { return applyupper_; }
    }
    
    public const int IpopriceFieldNumber = 4;
    private bool hasIpoprice;
    private string ipoprice_ = "";
    public bool HasIpoprice {
      get { return hasIpoprice; }
    }
    public string Ipoprice {
      get { return ipoprice_; }
    }
    
    public const int ListdateFieldNumber = 5;
    private bool hasListdate;
    private string listdate_ = "";
    public bool HasListdate {
      get { return hasListdate; }
    }
    public string Listdate {
      get { return listdate_; }
    }
    
    public const int LotteryrateFieldNumber = 6;
    private bool hasLotteryrate;
    private string lotteryrate_ = "";
    public bool HasLotteryrate {
      get { return hasLotteryrate; }
    }
    public string Lotteryrate {
      get { return lotteryrate_; }
    }
    
    public const int PeratioFieldNumber = 7;
    private bool hasPeratio;
    private string peratio_ = "";
    public bool HasPeratio {
      get { return hasPeratio; }
    }
    public string Peratio {
      get { return peratio_; }
    }
    
    public const int IndustryratioFieldNumber = 8;
    private bool hasIndustryratio;
    private string industryratio_ = "";
    public bool HasIndustryratio {
      get { return hasIndustryratio; }
    }
    public string Industryratio {
      get { return industryratio_; }
    }
    
    public const int TradingnumFieldNumber = 9;
    private bool hasTradingnum;
    private int tradingnum_;
    public bool HasTradingnum {
      get { return hasTradingnum; }
    }
    public int Tradingnum {
      get { return tradingnum_; }
    }
    
    public const int TradingrangeFieldNumber = 10;
    private bool hasTradingrange;
    private float tradingrange_;
    public bool HasTradingrange {
      get { return hasTradingrange; }
    }
    public float Tradingrange {
      get { return tradingrange_; }
    }
    
    public const int RetreatrangeFieldNumber = 11;
    private bool hasRetreatrange;
    private float retreatrange_;
    public bool HasRetreatrange {
      get { return hasRetreatrange; }
    }
    public float Retreatrange {
      get { return retreatrange_; }
    }
    
    public const int SecondrangeFieldNumber = 12;
    private bool hasSecondrange;
    private float secondrange_;
    public bool HasSecondrange {
      get { return hasSecondrange; }
    }
    public float Secondrange {
      get { return secondrange_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _newStockInfoFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[1], Code);
      }
      if (hasName) {
        output.WriteString(2, field_names[6], Name);
      }
      if (hasApplyupper) {
        output.WriteString(3, field_names[0], Applyupper);
      }
      if (hasIpoprice) {
        output.WriteString(4, field_names[3], Ipoprice);
      }
      if (hasListdate) {
        output.WriteString(5, field_names[4], Listdate);
      }
      if (hasLotteryrate) {
        output.WriteString(6, field_names[5], Lotteryrate);
      }
      if (hasPeratio) {
        output.WriteString(7, field_names[7], Peratio);
      }
      if (hasIndustryratio) {
        output.WriteString(8, field_names[2], Industryratio);
      }
      if (hasTradingnum) {
        output.WriteInt32(9, field_names[10], Tradingnum);
      }
      if (hasTradingrange) {
        output.WriteFloat(10, field_names[11], Tradingrange);
      }
      if (hasRetreatrange) {
        output.WriteFloat(11, field_names[8], Retreatrange);
      }
      if (hasSecondrange) {
        output.WriteFloat(12, field_names[9], Secondrange);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasApplyupper) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Applyupper);
      }
      if (hasIpoprice) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Ipoprice);
      }
      if (hasListdate) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Listdate);
      }
      if (hasLotteryrate) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Lotteryrate);
      }
      if (hasPeratio) {
        size += pb::CodedOutputStream.ComputeStringSize(7, Peratio);
      }
      if (hasIndustryratio) {
        size += pb::CodedOutputStream.ComputeStringSize(8, Industryratio);
      }
      if (hasTradingnum) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Tradingnum);
      }
      if (hasTradingrange) {
        size += pb::CodedOutputStream.ComputeFloatSize(10, Tradingrange);
      }
      if (hasRetreatrange) {
        size += pb::CodedOutputStream.ComputeFloatSize(11, Retreatrange);
      }
      if (hasSecondrange) {
        size += pb::CodedOutputStream.ComputeFloatSize(12, Secondrange);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NewStockInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewStockInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewStockInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewStockInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewStockInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewStockInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewStockInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewStockInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewStockInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewStockInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewStockInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewStockInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewStockInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewStockInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewStockInfo result;
      
      private NewStockInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          NewStockInfo original = result;
          result = new NewStockInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewStockInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.NewStockInfo.Descriptor; }
      }
      
      public override NewStockInfo DefaultInstanceForType {
        get { return global::StockServer.NewStockInfo.DefaultInstance; }
      }
      
      public override NewStockInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewStockInfo) {
          return MergeFrom((NewStockInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewStockInfo other) {
        if (other == global::StockServer.NewStockInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasApplyupper) {
          Applyupper = other.Applyupper;
        }
        if (other.HasIpoprice) {
          Ipoprice = other.Ipoprice;
        }
        if (other.HasListdate) {
          Listdate = other.Listdate;
        }
        if (other.HasLotteryrate) {
          Lotteryrate = other.Lotteryrate;
        }
        if (other.HasPeratio) {
          Peratio = other.Peratio;
        }
        if (other.HasIndustryratio) {
          Industryratio = other.Industryratio;
        }
        if (other.HasTradingnum) {
          Tradingnum = other.Tradingnum;
        }
        if (other.HasTradingrange) {
          Tradingrange = other.Tradingrange;
        }
        if (other.HasRetreatrange) {
          Retreatrange = other.Retreatrange;
        }
        if (other.HasSecondrange) {
          Secondrange = other.Secondrange;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newStockInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newStockInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasApplyupper = input.ReadString(ref result.applyupper_);
              break;
            }
            case 34: {
              result.hasIpoprice = input.ReadString(ref result.ipoprice_);
              break;
            }
            case 42: {
              result.hasListdate = input.ReadString(ref result.listdate_);
              break;
            }
            case 50: {
              result.hasLotteryrate = input.ReadString(ref result.lotteryrate_);
              break;
            }
            case 58: {
              result.hasPeratio = input.ReadString(ref result.peratio_);
              break;
            }
            case 66: {
              result.hasIndustryratio = input.ReadString(ref result.industryratio_);
              break;
            }
            case 72: {
              result.hasTradingnum = input.ReadInt32(ref result.tradingnum_);
              break;
            }
            case 85: {
              result.hasTradingrange = input.ReadFloat(ref result.tradingrange_);
              break;
            }
            case 93: {
              result.hasRetreatrange = input.ReadFloat(ref result.retreatrange_);
              break;
            }
            case 101: {
              result.hasSecondrange = input.ReadFloat(ref result.secondrange_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasApplyupper {
        get { return result.hasApplyupper; }
      }
      public string Applyupper {
        get { return result.Applyupper; }
        set { SetApplyupper(value); }
      }
      public Builder SetApplyupper(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasApplyupper = true;
        result.applyupper_ = value;
        return this;
      }
      public Builder ClearApplyupper() {
        PrepareBuilder();
        result.hasApplyupper = false;
        result.applyupper_ = "";
        return this;
      }
      
      public bool HasIpoprice {
        get { return result.hasIpoprice; }
      }
      public string Ipoprice {
        get { return result.Ipoprice; }
        set { SetIpoprice(value); }
      }
      public Builder SetIpoprice(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIpoprice = true;
        result.ipoprice_ = value;
        return this;
      }
      public Builder ClearIpoprice() {
        PrepareBuilder();
        result.hasIpoprice = false;
        result.ipoprice_ = "";
        return this;
      }
      
      public bool HasListdate {
        get { return result.hasListdate; }
      }
      public string Listdate {
        get { return result.Listdate; }
        set { SetListdate(value); }
      }
      public Builder SetListdate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasListdate = true;
        result.listdate_ = value;
        return this;
      }
      public Builder ClearListdate() {
        PrepareBuilder();
        result.hasListdate = false;
        result.listdate_ = "";
        return this;
      }
      
      public bool HasLotteryrate {
        get { return result.hasLotteryrate; }
      }
      public string Lotteryrate {
        get { return result.Lotteryrate; }
        set { SetLotteryrate(value); }
      }
      public Builder SetLotteryrate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLotteryrate = true;
        result.lotteryrate_ = value;
        return this;
      }
      public Builder ClearLotteryrate() {
        PrepareBuilder();
        result.hasLotteryrate = false;
        result.lotteryrate_ = "";
        return this;
      }
      
      public bool HasPeratio {
        get { return result.hasPeratio; }
      }
      public string Peratio {
        get { return result.Peratio; }
        set { SetPeratio(value); }
      }
      public Builder SetPeratio(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPeratio = true;
        result.peratio_ = value;
        return this;
      }
      public Builder ClearPeratio() {
        PrepareBuilder();
        result.hasPeratio = false;
        result.peratio_ = "";
        return this;
      }
      
      public bool HasIndustryratio {
        get { return result.hasIndustryratio; }
      }
      public string Industryratio {
        get { return result.Industryratio; }
        set { SetIndustryratio(value); }
      }
      public Builder SetIndustryratio(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIndustryratio = true;
        result.industryratio_ = value;
        return this;
      }
      public Builder ClearIndustryratio() {
        PrepareBuilder();
        result.hasIndustryratio = false;
        result.industryratio_ = "";
        return this;
      }
      
      public bool HasTradingnum {
        get { return result.hasTradingnum; }
      }
      public int Tradingnum {
        get { return result.Tradingnum; }
        set { SetTradingnum(value); }
      }
      public Builder SetTradingnum(int value) {
        PrepareBuilder();
        result.hasTradingnum = true;
        result.tradingnum_ = value;
        return this;
      }
      public Builder ClearTradingnum() {
        PrepareBuilder();
        result.hasTradingnum = false;
        result.tradingnum_ = 0;
        return this;
      }
      
      public bool HasTradingrange {
        get { return result.hasTradingrange; }
      }
      public float Tradingrange {
        get { return result.Tradingrange; }
        set { SetTradingrange(value); }
      }
      public Builder SetTradingrange(float value) {
        PrepareBuilder();
        result.hasTradingrange = true;
        result.tradingrange_ = value;
        return this;
      }
      public Builder ClearTradingrange() {
        PrepareBuilder();
        result.hasTradingrange = false;
        result.tradingrange_ = 0F;
        return this;
      }
      
      public bool HasRetreatrange {
        get { return result.hasRetreatrange; }
      }
      public float Retreatrange {
        get { return result.Retreatrange; }
        set { SetRetreatrange(value); }
      }
      public Builder SetRetreatrange(float value) {
        PrepareBuilder();
        result.hasRetreatrange = true;
        result.retreatrange_ = value;
        return this;
      }
      public Builder ClearRetreatrange() {
        PrepareBuilder();
        result.hasRetreatrange = false;
        result.retreatrange_ = 0F;
        return this;
      }
      
      public bool HasSecondrange {
        get { return result.hasSecondrange; }
      }
      public float Secondrange {
        get { return result.Secondrange; }
        set { SetSecondrange(value); }
      }
      public Builder SetSecondrange(float value) {
        PrepareBuilder();
        result.hasSecondrange = true;
        result.secondrange_ = value;
        return this;
      }
      public Builder ClearSecondrange() {
        PrepareBuilder();
        result.hasSecondrange = false;
        result.secondrange_ = 0F;
        return this;
      }
    }
    static NewStockInfo() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewStockDataResponse : pb::GeneratedMessage<NewStockDataResponse, NewStockDataResponse.Builder> {
    private NewStockDataResponse() { }
    private static readonly NewStockDataResponse defaultInstance = new NewStockDataResponse().MakeReadOnly();
    private static readonly string[] _newStockDataResponseFieldNames = new string[] { "data" };
    private static readonly uint[] _newStockDataResponseFieldTags = new uint[] { 10 };
    public static NewStockDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewStockDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewStockDataResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_NewStockDataResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewStockDataResponse, NewStockDataResponse.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_NewStockDataResponse__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private pbc::PopsicleList<global::StockServer.NewStockInfo> data_ = new pbc::PopsicleList<global::StockServer.NewStockInfo>();
    public scg::IList<global::StockServer.NewStockInfo> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::StockServer.NewStockInfo GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::StockServer.NewStockInfo element in DataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _newStockDataResponseFieldNames;
      if (data_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::StockServer.NewStockInfo element in DataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NewStockDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewStockDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewStockDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewStockDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewStockDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewStockDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewStockDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewStockDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewStockDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewStockDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewStockDataResponse MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewStockDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewStockDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewStockDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewStockDataResponse result;
      
      private NewStockDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NewStockDataResponse original = result;
          result = new NewStockDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewStockDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.NewStockDataResponse.Descriptor; }
      }
      
      public override NewStockDataResponse DefaultInstanceForType {
        get { return global::StockServer.NewStockDataResponse.DefaultInstance; }
      }
      
      public override NewStockDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewStockDataResponse) {
          return MergeFrom((NewStockDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewStockDataResponse other) {
        if (other == global::StockServer.NewStockDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newStockDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newStockDataResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.data_, global::StockServer.NewStockInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::StockServer.NewStockInfo> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::StockServer.NewStockInfo GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::StockServer.NewStockInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::StockServer.NewStockInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::StockServer.NewStockInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::StockServer.NewStockInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::StockServer.NewStockInfo> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static NewStockDataResponse() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IpoDataRequest : pb::GeneratedMessage<IpoDataRequest, IpoDataRequest.Builder> {
    private IpoDataRequest() { }
    private static readonly IpoDataRequest defaultInstance = new IpoDataRequest().MakeReadOnly();
    private static readonly string[] _ipoDataRequestFieldNames = new string[] { "dummy" };
    private static readonly uint[] _ipoDataRequestFieldTags = new uint[] { 10 };
    public static IpoDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IpoDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IpoDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_IpoDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IpoDataRequest, IpoDataRequest.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_IpoDataRequest__FieldAccessorTable; }
    }
    
    public const int DummyFieldNumber = 1;
    private bool hasDummy;
    private string dummy_ = "";
    public bool HasDummy {
      get { return hasDummy; }
    }
    public string Dummy {
      get { return dummy_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _ipoDataRequestFieldNames;
      if (hasDummy) {
        output.WriteString(1, field_names[0], Dummy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDummy) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Dummy);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IpoDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IpoDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IpoDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IpoDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IpoDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IpoDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IpoDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IpoDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IpoDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IpoDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IpoDataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IpoDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IpoDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IpoDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IpoDataRequest result;
      
      private IpoDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          IpoDataRequest original = result;
          result = new IpoDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IpoDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.IpoDataRequest.Descriptor; }
      }
      
      public override IpoDataRequest DefaultInstanceForType {
        get { return global::StockServer.IpoDataRequest.DefaultInstance; }
      }
      
      public override IpoDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IpoDataRequest) {
          return MergeFrom((IpoDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IpoDataRequest other) {
        if (other == global::StockServer.IpoDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDummy) {
          Dummy = other.Dummy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ipoDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ipoDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDummy = input.ReadString(ref result.dummy_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDummy {
        get { return result.hasDummy; }
      }
      public string Dummy {
        get { return result.Dummy; }
        set { SetDummy(value); }
      }
      public Builder SetDummy(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDummy = true;
        result.dummy_ = value;
        return this;
      }
      public Builder ClearDummy() {
        PrepareBuilder();
        result.hasDummy = false;
        result.dummy_ = "";
        return this;
      }
    }
    static IpoDataRequest() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IpoInfo : pb::GeneratedMessage<IpoInfo, IpoInfo.Builder> {
    private IpoInfo() { }
    private static readonly IpoInfo defaultInstance = new IpoInfo().MakeReadOnly();
    private static readonly string[] _ipoInfoFieldNames = new string[] { "applycode", "applyupper", "code", "industryratio", "ipoprice", "listdate", "name", "peratio" };
    private static readonly uint[] _ipoInfoFieldTags = new uint[] { 26, 34, 10, 66, 42, 50, 18, 58 };
    public static IpoInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IpoInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IpoInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_IpoInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IpoInfo, IpoInfo.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_IpoInfo__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ApplycodeFieldNumber = 3;
    private bool hasApplycode;
    private string applycode_ = "";
    public bool HasApplycode {
      get { return hasApplycode; }
    }
    public string Applycode {
      get { return applycode_; }
    }
    
    public const int ApplyupperFieldNumber = 4;
    private bool hasApplyupper;
    private string applyupper_ = "";
    public bool HasApplyupper {
      get { return hasApplyupper; }
    }
    public string Applyupper {
      get { return applyupper_; }
    }
    
    public const int IpopriceFieldNumber = 5;
    private bool hasIpoprice;
    private string ipoprice_ = "";
    public bool HasIpoprice {
      get { return hasIpoprice; }
    }
    public string Ipoprice {
      get { return ipoprice_; }
    }
    
    public const int ListdateFieldNumber = 6;
    private bool hasListdate;
    private string listdate_ = "";
    public bool HasListdate {
      get { return hasListdate; }
    }
    public string Listdate {
      get { return listdate_; }
    }
    
    public const int PeratioFieldNumber = 7;
    private bool hasPeratio;
    private string peratio_ = "";
    public bool HasPeratio {
      get { return hasPeratio; }
    }
    public string Peratio {
      get { return peratio_; }
    }
    
    public const int IndustryratioFieldNumber = 8;
    private bool hasIndustryratio;
    private string industryratio_ = "";
    public bool HasIndustryratio {
      get { return hasIndustryratio; }
    }
    public string Industryratio {
      get { return industryratio_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _ipoInfoFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[2], Code);
      }
      if (hasName) {
        output.WriteString(2, field_names[6], Name);
      }
      if (hasApplycode) {
        output.WriteString(3, field_names[0], Applycode);
      }
      if (hasApplyupper) {
        output.WriteString(4, field_names[1], Applyupper);
      }
      if (hasIpoprice) {
        output.WriteString(5, field_names[4], Ipoprice);
      }
      if (hasListdate) {
        output.WriteString(6, field_names[5], Listdate);
      }
      if (hasPeratio) {
        output.WriteString(7, field_names[7], Peratio);
      }
      if (hasIndustryratio) {
        output.WriteString(8, field_names[3], Industryratio);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Code);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasApplycode) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Applycode);
      }
      if (hasApplyupper) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Applyupper);
      }
      if (hasIpoprice) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Ipoprice);
      }
      if (hasListdate) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Listdate);
      }
      if (hasPeratio) {
        size += pb::CodedOutputStream.ComputeStringSize(7, Peratio);
      }
      if (hasIndustryratio) {
        size += pb::CodedOutputStream.ComputeStringSize(8, Industryratio);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IpoInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IpoInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IpoInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IpoInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IpoInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IpoInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IpoInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IpoInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IpoInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IpoInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IpoInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IpoInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IpoInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IpoInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IpoInfo result;
      
      private IpoInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          IpoInfo original = result;
          result = new IpoInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IpoInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.IpoInfo.Descriptor; }
      }
      
      public override IpoInfo DefaultInstanceForType {
        get { return global::StockServer.IpoInfo.DefaultInstance; }
      }
      
      public override IpoInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IpoInfo) {
          return MergeFrom((IpoInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IpoInfo other) {
        if (other == global::StockServer.IpoInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasApplycode) {
          Applycode = other.Applycode;
        }
        if (other.HasApplyupper) {
          Applyupper = other.Applyupper;
        }
        if (other.HasIpoprice) {
          Ipoprice = other.Ipoprice;
        }
        if (other.HasListdate) {
          Listdate = other.Listdate;
        }
        if (other.HasPeratio) {
          Peratio = other.Peratio;
        }
        if (other.HasIndustryratio) {
          Industryratio = other.Industryratio;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ipoInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ipoInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasApplycode = input.ReadString(ref result.applycode_);
              break;
            }
            case 34: {
              result.hasApplyupper = input.ReadString(ref result.applyupper_);
              break;
            }
            case 42: {
              result.hasIpoprice = input.ReadString(ref result.ipoprice_);
              break;
            }
            case 50: {
              result.hasListdate = input.ReadString(ref result.listdate_);
              break;
            }
            case 58: {
              result.hasPeratio = input.ReadString(ref result.peratio_);
              break;
            }
            case 66: {
              result.hasIndustryratio = input.ReadString(ref result.industryratio_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasApplycode {
        get { return result.hasApplycode; }
      }
      public string Applycode {
        get { return result.Applycode; }
        set { SetApplycode(value); }
      }
      public Builder SetApplycode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasApplycode = true;
        result.applycode_ = value;
        return this;
      }
      public Builder ClearApplycode() {
        PrepareBuilder();
        result.hasApplycode = false;
        result.applycode_ = "";
        return this;
      }
      
      public bool HasApplyupper {
        get { return result.hasApplyupper; }
      }
      public string Applyupper {
        get { return result.Applyupper; }
        set { SetApplyupper(value); }
      }
      public Builder SetApplyupper(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasApplyupper = true;
        result.applyupper_ = value;
        return this;
      }
      public Builder ClearApplyupper() {
        PrepareBuilder();
        result.hasApplyupper = false;
        result.applyupper_ = "";
        return this;
      }
      
      public bool HasIpoprice {
        get { return result.hasIpoprice; }
      }
      public string Ipoprice {
        get { return result.Ipoprice; }
        set { SetIpoprice(value); }
      }
      public Builder SetIpoprice(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIpoprice = true;
        result.ipoprice_ = value;
        return this;
      }
      public Builder ClearIpoprice() {
        PrepareBuilder();
        result.hasIpoprice = false;
        result.ipoprice_ = "";
        return this;
      }
      
      public bool HasListdate {
        get { return result.hasListdate; }
      }
      public string Listdate {
        get { return result.Listdate; }
        set { SetListdate(value); }
      }
      public Builder SetListdate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasListdate = true;
        result.listdate_ = value;
        return this;
      }
      public Builder ClearListdate() {
        PrepareBuilder();
        result.hasListdate = false;
        result.listdate_ = "";
        return this;
      }
      
      public bool HasPeratio {
        get { return result.hasPeratio; }
      }
      public string Peratio {
        get { return result.Peratio; }
        set { SetPeratio(value); }
      }
      public Builder SetPeratio(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPeratio = true;
        result.peratio_ = value;
        return this;
      }
      public Builder ClearPeratio() {
        PrepareBuilder();
        result.hasPeratio = false;
        result.peratio_ = "";
        return this;
      }
      
      public bool HasIndustryratio {
        get { return result.hasIndustryratio; }
      }
      public string Industryratio {
        get { return result.Industryratio; }
        set { SetIndustryratio(value); }
      }
      public Builder SetIndustryratio(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIndustryratio = true;
        result.industryratio_ = value;
        return this;
      }
      public Builder ClearIndustryratio() {
        PrepareBuilder();
        result.hasIndustryratio = false;
        result.industryratio_ = "";
        return this;
      }
    }
    static IpoInfo() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IpoDataResponse : pb::GeneratedMessage<IpoDataResponse, IpoDataResponse.Builder> {
    private IpoDataResponse() { }
    private static readonly IpoDataResponse defaultInstance = new IpoDataResponse().MakeReadOnly();
    private static readonly string[] _ipoDataResponseFieldNames = new string[] { "data" };
    private static readonly uint[] _ipoDataResponseFieldTags = new uint[] { 10 };
    public static IpoDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IpoDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IpoDataResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::StockServer.Stockserver.internal__static_StockServer_IpoDataResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IpoDataResponse, IpoDataResponse.Builder> InternalFieldAccessors {
      get { return global::StockServer.Stockserver.internal__static_StockServer_IpoDataResponse__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private pbc::PopsicleList<global::StockServer.IpoInfo> data_ = new pbc::PopsicleList<global::StockServer.IpoInfo>();
    public scg::IList<global::StockServer.IpoInfo> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::StockServer.IpoInfo GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::StockServer.IpoInfo element in DataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _ipoDataResponseFieldNames;
      if (data_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::StockServer.IpoInfo element in DataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IpoDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IpoDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IpoDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IpoDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IpoDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IpoDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IpoDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IpoDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IpoDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IpoDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IpoDataResponse MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IpoDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IpoDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IpoDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IpoDataResponse result;
      
      private IpoDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          IpoDataResponse original = result;
          result = new IpoDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IpoDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::StockServer.IpoDataResponse.Descriptor; }
      }
      
      public override IpoDataResponse DefaultInstanceForType {
        get { return global::StockServer.IpoDataResponse.DefaultInstance; }
      }
      
      public override IpoDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IpoDataResponse) {
          return MergeFrom((IpoDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IpoDataResponse other) {
        if (other == global::StockServer.IpoDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ipoDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ipoDataResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.data_, global::StockServer.IpoInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::StockServer.IpoInfo> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::StockServer.IpoInfo GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::StockServer.IpoInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::StockServer.IpoInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::StockServer.IpoInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::StockServer.IpoInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::StockServer.IpoInfo> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static IpoDataResponse() {
      object.ReferenceEquals(global::StockServer.Stockserver.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
